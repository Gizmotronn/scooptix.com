define(['dart_sdk', 'packages/ticketapp/repositories/payment_repository.dart', 'packages/ticketapp/model/release_manager.dart', 'packages/ticketapp/services/bugsnag_wrapper.dart', 'packages/ticketapp/repositories/ticket_repository.dart', 'packages/bloc/src/cubit.dart', 'packages/equatable/src/equatable_mixin.dart', 'packages/ticketapp/model/ticket_release.dart', 'packages/ticketapp/model/discount.dart', 'packages/stripe_sdk/src/ui/screens/add_payment_method_screen.dart', 'packages/ticketapp/model/event.dart'], (function load__packages__ticketapp__pages__payment__bloc__payment_bloc_dart(dart_sdk, packages__ticketapp__repositories__payment_repository$46dart, packages__ticketapp__model__release_manager$46dart, packages__ticketapp__services__bugsnag_wrapper$46dart, packages__ticketapp__repositories__ticket_repository$46dart, packages__bloc__src__cubit$46dart, packages__equatable__src__equatable_mixin$46dart, packages__ticketapp__model__ticket_release$46dart, packages__ticketapp__model__discount$46dart, packages__stripe_sdk__src__ui__screens__add_payment_method_screen$46dart, packages__ticketapp__model__event$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const convert = dart_sdk.convert;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const payment_repository = packages__ticketapp__repositories__payment_repository$46dart.repositories__payment_repository;
  const release_manager = packages__ticketapp__model__release_manager$46dart.model__release_manager;
  const bugsnag_wrapper = packages__ticketapp__services__bugsnag_wrapper$46dart.services__bugsnag_wrapper;
  const ticket_repository = packages__ticketapp__repositories__ticket_repository$46dart.repositories__ticket_repository;
  const bloc = packages__bloc__src__cubit$46dart.src__bloc;
  const equatable = packages__equatable__src__equatable_mixin$46dart.src__equatable;
  const ticket_release = packages__ticketapp__model__ticket_release$46dart.model__ticket_release;
  const discount = packages__ticketapp__model__discount$46dart.model__discount;
  const payment_methods_screen = packages__stripe_sdk__src__ui__screens__add_payment_method_screen$46dart.src__ui__screens__payment_methods_screen;
  const event = packages__ticketapp__model__event$46dart.model__event;
  var payment_bloc = Object.create(dart.library);
  var $contains = dartx.contains;
  var $firstWhere = dartx.firstWhere;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $any = dartx.any;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    PaymentEventL: () => (T.PaymentEventL = dart.constFn(dart.legacy(payment_bloc.PaymentEvent)))(),
    EventLoadAvailableReleasesL: () => (T.EventLoadAvailableReleasesL = dart.constFn(dart.legacy(payment_bloc.EventLoadAvailableReleases)))(),
    EventConfirmSetupIntentL: () => (T.EventConfirmSetupIntentL = dart.constFn(dart.legacy(payment_bloc.EventConfirmSetupIntent)))(),
    EventRequestPIL: () => (T.EventRequestPIL = dart.constFn(dart.legacy(payment_bloc.EventRequestPI)))(),
    EventCancelPaymentL: () => (T.EventCancelPaymentL = dart.constFn(dart.legacy(payment_bloc.EventCancelPayment)))(),
    EventChangePaymentMethodL: () => (T.EventChangePaymentMethodL = dart.constFn(dart.legacy(payment_bloc.EventChangePaymentMethod)))(),
    EventAddPaymentMethodL: () => (T.EventAddPaymentMethodL = dart.constFn(dart.legacy(payment_bloc.EventAddPaymentMethod)))(),
    EventTicketSelectedL: () => (T.EventTicketSelectedL = dart.constFn(dart.legacy(payment_bloc.EventTicketSelected)))(),
    EventApplyDiscountL: () => (T.EventApplyDiscountL = dart.constFn(dart.legacy(payment_bloc.EventApplyDiscount)))(),
    PaymentStateL: () => (T.PaymentStateL = dart.constFn(dart.legacy(payment_bloc.PaymentState)))(),
    _AsyncStarImplOfPaymentStateL: () => (T._AsyncStarImplOfPaymentStateL = dart.constFn(async._AsyncStarImpl$(T.PaymentStateL())))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ReleaseManagerL: () => (T.ReleaseManagerL = dart.constFn(dart.legacy(release_manager.ReleaseManager)))(),
    ReleaseManagerLToboolL: () => (T.ReleaseManagerLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ReleaseManagerL()])))(),
    ObjectL: () => (T.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    JSArrayOfObjectL: () => (T.JSArrayOfObjectL = dart.constFn(_interceptors.JSArray$(T.ObjectL())))(),
    ListOfReleaseManagerL: () => (T.ListOfReleaseManagerL = dart.constFn(core.List$(T.ReleaseManagerL())))(),
    ListLOfReleaseManagerL: () => (T.ListLOfReleaseManagerL = dart.constFn(dart.legacy(T.ListOfReleaseManagerL())))(),
    DiscountL: () => (T.DiscountL = dart.constFn(dart.legacy(discount.Discount)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = ["package:ticketapp/pages/payment/bloc/payment_bloc.dart"];
  var event$ = dart.privateName(payment_bloc, "PaymentBloc.event");
  var _loadReleases = dart.privateName(payment_bloc, "_loadReleases");
  var _savePaymentMethod = dart.privateName(payment_bloc, "_savePaymentMethod");
  var _createPaymentIntent = dart.privateName(payment_bloc, "_createPaymentIntent");
  var _getSetupIntent = dart.privateName(payment_bloc, "_getSetupIntent");
  var _selectTicket = dart.privateName(payment_bloc, "_selectTicket");
  var _applyDiscount = dart.privateName(payment_bloc, "_applyDiscount");
  var _confirmPayment = dart.privateName(payment_bloc, "_confirmPayment");
  payment_bloc.PaymentEvent = class PaymentEvent extends equatable.Equatable {
    get props() {
      return T.JSArrayOfObjectL().of([]);
    }
  };
  (payment_bloc.PaymentEvent.new = function() {
    payment_bloc.PaymentEvent.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.PaymentEvent.prototype;
  dart.addTypeTests(payment_bloc.PaymentEvent);
  dart.addTypeCaches(payment_bloc.PaymentEvent);
  dart.setGetterSignature(payment_bloc.PaymentEvent, () => ({
    __proto__: dart.getGetters(payment_bloc.PaymentEvent.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(payment_bloc.PaymentEvent, I[0]);
  payment_bloc.PaymentState = class PaymentState extends equatable.Equatable {
    get props() {
      return T.JSArrayOfObjectL().of([]);
    }
  };
  (payment_bloc.PaymentState.new = function() {
    payment_bloc.PaymentState.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.PaymentState.prototype;
  dart.addTypeTests(payment_bloc.PaymentState);
  dart.addTypeCaches(payment_bloc.PaymentState);
  dart.setGetterSignature(payment_bloc.PaymentState, () => ({
    __proto__: dart.getGetters(payment_bloc.PaymentState.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(payment_bloc.PaymentState, I[0]);
  payment_bloc.PaymentBloc = class PaymentBloc extends bloc.Bloc$(dart.legacy(payment_bloc.PaymentEvent), dart.legacy(payment_bloc.PaymentState)) {
    get event() {
      return this[event$];
    }
    set event(value) {
      this[event$] = value;
    }
    mapEventToState(event) {
      T.PaymentEventL().as(event);
      return new (T._AsyncStarImplOfPaymentStateL()).new((function* mapEventToState(stream) {
        if (T.EventLoadAvailableReleasesL().is(event)) {
          payment_repository.PaymentRepository.instance.dispose();
          if (stream.addStream(this[_loadReleases](event.event))) return;
          yield;
        } else if (T.EventConfirmSetupIntentL().is(event)) {
          if (stream.addStream(this[_savePaymentMethod](event.paymentMethod, event.saveCreditCard))) return;
          yield;
        } else if (T.EventRequestPIL().is(event)) {
          if (stream.addStream(this[_createPaymentIntent](event.selectedRelease, event.quantity, event.discount))) return;
          yield;
        } else if (T.EventCancelPaymentL().is(event)) {
          if (stream.addStream(this[_loadReleases](this.event))) return;
          yield;
        } else if (T.EventChangePaymentMethodL().is(event)) {
          if (stream.addStream(this[_getSetupIntent](true))) return;
          yield;
        } else if (T.EventAddPaymentMethodL().is(event)) {
          if (stream.add(new payment_bloc.StateAddPaymentMethod.new())) return;
          yield;
        } else if (T.EventTicketSelectedL().is(event)) {
          if (stream.addStream(this[_selectTicket](event.selectedRelease, event.managers))) return;
          yield;
        } else if (T.EventApplyDiscountL().is(event)) {
          if (stream.addStream(this[_applyDiscount](event.code, event.selectedRelease))) return;
          yield;
        }
      }).bind(this)).stream;
    }
    [_getSetupIntent](newPaymentMethod) {
      return new (T._AsyncStarImplOfPaymentStateL()).new(function* _getSetupIntent(stream) {
        if (stream.add(new payment_bloc.StateLoadingPaymentMethod.new())) return;
        yield;
        let response = (yield payment_repository.PaymentRepository.instance.getSetupIntent(newPaymentMethod));
        try {
          if (response.statusCode === 200) {
            core.print(response.body);
            payment_repository.PaymentRepository.instance.paymentMethodId = T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["paymentMethod"]));
            payment_repository.PaymentRepository.instance.last4 = T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["last4"]));
            if (dart.equals(dart.dsend(convert.json.decode(response.body), '_get', ["requiresConfirmation"]), false)) {
            } else {
              if (stream.add(new payment_bloc.StateSIRequiresPaymentMethod.new(T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["setupIntentId"]))))) return;
              yield;
            }
          } else {
            if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
            yield;
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print(e);
        }
      }).stream;
    }
    [_createPaymentIntent](selectedRelease, quantity, discount) {
      return new (T._AsyncStarImplOfPaymentStateL()).new((function* _createPaymentIntent(stream) {
        if (stream.add(new payment_bloc.StateLoadingPaymentIntent.new())) return;
        yield;
        try {
          let response = (yield payment_repository.PaymentRepository.instance.createPaymentIntent(this.event.docID, this.event.releaseManagers[$firstWhere](dart.fn(element => element.releases[$contains](selectedRelease), T.ReleaseManagerLToboolL())).docId, selectedRelease.docId, quantity, discount));
          if (response != null) {
            if (response.statusCode === 200) {
              payment_repository.PaymentRepository.instance.clientSecret = T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["clientSecret"]));
              if (stream.addStream(this[_confirmPayment](selectedRelease, quantity))) return;
              yield;
            } else {
              if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
              yield;
            }
          } else {
            if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
            yield;
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          core.print(e);
          if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
          yield;
        }
      }).bind(this)).stream;
    }
    [_confirmPayment](selectedRelease, quantity) {
      return new (T._AsyncStarImplOfPaymentStateL()).new(function* _confirmPayment(stream) {
        let errorMessage = "An unknown error occurred. Please try again.";
        try {
          let result = (yield payment_repository.PaymentRepository.instance.confirmPayment(payment_repository.PaymentRepository.instance.clientSecret, payment_repository.PaymentRepository.instance.paymentMethodId));
          if (result == null) {
            if (stream.add(new payment_bloc.StatePaymentError.new(errorMessage))) return;
            yield;
          } else if (dart.equals(result[$_get]("status"), "succeeded")) {
            if (stream.add(new payment_bloc.StatePaymentCompleted.new("We are processing your order and will send you an email as soon as your tickets are ready. This should not take more than a few minutes.", selectedRelease, quantity))) return;
            yield;
            payment_repository.PaymentRepository.instance.dispose();
          } else {
            if (stream.add(new payment_bloc.StatePaymentError.new(dart.toString(result)))) return;
            yield;
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print(e);
          if (stream.add(new payment_bloc.StatePaymentError.new(dart.toString(e)))) return;
          yield;
        }
      }).stream;
    }
    [_savePaymentMethod](payment, saveCreditCard) {
      return new (T._AsyncStarImplOfPaymentStateL()).new((function* _savePaymentMethod(stream) {
        if (stream.add(new payment_bloc.StateLoading.new())) return;
        yield;
        payment_repository.PaymentRepository.instance.saveCreditCard = saveCreditCard;
        if (dart.test(saveCreditCard)) {
          core.print("saving credit card");
          let response = (yield payment_repository.PaymentRepository.instance.getSetupIntent(true));
          if (response.statusCode === 200) {
            response = (yield payment_repository.PaymentRepository.instance.confirmSetupIntent(payment.id, T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["setupIntentId"]))));
            if (response != null) {
              if (response.statusCode === 200) {
                payment_repository.PaymentRepository.instance.paymentMethodId = payment.id;
                payment_repository.PaymentRepository.instance.last4 = payment.last4;
                if (stream.addStream(this[_loadReleases](this.event))) return;
                yield;
              } else {
                if (stream.add(new payment_bloc.StatePaymentError.new(dart.toString(response)))) return;
                yield;
              }
            } else {
              if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
              yield;
            }
          }
        } else {
          payment_repository.PaymentRepository.instance.paymentMethodId = payment.id;
          payment_repository.PaymentRepository.instance.last4 = payment.last4;
          core.print(payment_repository.PaymentRepository.instance.last4);
          if (stream.addStream(this[_loadReleases](this.event))) return;
          yield;
        }
      }).bind(this)).stream;
    }
    [_loadReleases](event) {
      return new (T._AsyncStarImplOfPaymentStateL()).new((function* _loadReleases(stream) {
        if (stream.add(new payment_bloc.StateLoading.new())) return;
        yield;
        this.event = event;
        let managers = event.getManagersWithActiveReleases();
        if (dart.test(managers[$any](dart.fn(element => dart.notNull(element.getActiveRelease().price) > 0, T.ReleaseManagerLToboolL())))) {
          if (payment_repository.PaymentRepository.instance.paymentMethodId == null || payment_repository.PaymentRepository.instance.last4 == null) {
            let response = (yield payment_repository.PaymentRepository.instance.getSetupIntent(false));
            try {
              if (response.statusCode === 200) {
                if (dart.equals(dart.dsend(convert.json.decode(response.body), '_get', ["requiresConfirmation"]), false)) {
                  core.print(dart.dsend(convert.json.decode(response.body), '_get', ["paymentMethod"]));
                  payment_repository.PaymentRepository.instance.paymentMethodId = T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["paymentMethod"]));
                  payment_repository.PaymentRepository.instance.last4 = T.StringL().as(dart.dsend(convert.json.decode(response.body), '_get', ["last4"]));
                }
              } else {
                if (stream.add(new payment_bloc.StatePaymentError.new("An unknown error occurred. Please try again."))) return;
                yield;
              }
            } catch (e$) {
              let e = dart.getThrown(e$);
              core.print(e);
            }
          }
        }
        if (dart.notNull(managers[$length]) > 0) {
          if (dart.notNull(managers[$_get](0).getActiveRelease().price) > 0) {
            if (dart.test(managers[$_get](0).singleTicketRestriction)) {
              if (stream.add(new payment_bloc.StatePaidTicketSelected.new(managers))) return;
              yield;
            } else {
              if (stream.add(new payment_bloc.StatePaidTicketQuantitySelected.new(managers))) return;
              yield;
            }
          } else {
            if (dart.test(managers[$_get](0).singleTicketRestriction)) {
              if (stream.add(new payment_bloc.StateFreeTicketSelected.new(managers))) return;
              yield;
            } else {
              if (stream.add(new payment_bloc.StateFreeTicketSelected.new(managers))) return;
              yield;
            }
          }
        } else {
          if (stream.add(new payment_bloc.StateNoTicketsAvailable.new())) return;
          yield;
        }
      }).bind(this)).stream;
    }
    [_selectTicket](selectedRelease, managers) {
      return new (T._AsyncStarImplOfPaymentStateL()).new(function* _selectTicket(stream) {
        if (stream.add(new payment_bloc.StateUpdating.new())) return;
        yield;
        if (selectedRelease.price === 0) {
          if (stream.add(new payment_bloc.StateFreeTicketSelected.new(managers))) return;
          yield;
        } else {
          try {
            if (dart.test(managers[$firstWhere](dart.fn(element => element.releases[$contains](selectedRelease), T.ReleaseManagerLToboolL())).singleTicketRestriction)) {
              if (stream.add(new payment_bloc.StatePaidTicketSelected.new(managers))) return;
              yield;
            } else {
              if (stream.add(new payment_bloc.StatePaidTicketQuantitySelected.new(managers))) return;
              yield;
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s);
            if (stream.add(new payment_bloc.StatePaidTicketSelected.new(managers))) return;
            yield;
          }
        }
      }).stream;
    }
    [_applyDiscount](code, selectedRelease) {
      return new (T._AsyncStarImplOfPaymentStateL()).new((function* _applyDiscount(stream) {
        if (stream.add(new payment_bloc.StateDiscountCodeLoading.new())) return;
        yield;
        let discount = (yield ticket_repository.TicketRepository.instance.loadDiscount(this.event, code));
        if (discount == null) {
          if (stream.add(new payment_bloc.StateDiscountCodeInvalid.new())) return;
          yield;
        }
        if (dart.test(this.event.releaseManagers[$firstWhere](dart.fn(element => element.releases[$contains](selectedRelease), T.ReleaseManagerLToboolL())).singleTicketRestriction)) {
          if (stream.add(new payment_bloc.StatePaidTicketSelected.new(this.event.getManagersWithActiveReleases(), {discount: discount}))) return;
          yield;
        } else {
          if (stream.add(new payment_bloc.StatePaidTicketQuantitySelected.new(this.event.getManagersWithActiveReleases(), {discount: discount}))) return;
          yield;
        }
      }).bind(this)).stream;
    }
  };
  (payment_bloc.PaymentBloc.new = function() {
    this[event$] = null;
    payment_bloc.PaymentBloc.__proto__.new.call(this, new payment_bloc.StateInitial.new());
    ;
  }).prototype = payment_bloc.PaymentBloc.prototype;
  dart.addTypeTests(payment_bloc.PaymentBloc);
  dart.addTypeCaches(payment_bloc.PaymentBloc);
  dart.setMethodSignature(payment_bloc.PaymentBloc, () => ({
    __proto__: dart.getMethods(payment_bloc.PaymentBloc.__proto__),
    mapEventToState: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(core.Object)]),
    [_getSetupIntent]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(core.bool)]),
    [_createPaymentIntent]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(ticket_release.TicketRelease), dart.legacy(core.int), dart.legacy(discount.Discount)]),
    [_confirmPayment]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(ticket_release.TicketRelease), dart.legacy(core.int)]),
    [_savePaymentMethod]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(payment_methods_screen.PaymentMethod), dart.legacy(core.bool)]),
    [_loadReleases]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(event.Event)]),
    [_selectTicket]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(ticket_release.TicketRelease), dart.legacy(core.List$(dart.legacy(release_manager.ReleaseManager)))]),
    [_applyDiscount]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(payment_bloc.PaymentState))), [dart.legacy(core.String), dart.legacy(ticket_release.TicketRelease)])
  }));
  dart.setLibraryUri(payment_bloc.PaymentBloc, I[0]);
  dart.setFieldSignature(payment_bloc.PaymentBloc, () => ({
    __proto__: dart.getFields(payment_bloc.PaymentBloc.__proto__),
    event: dart.fieldType(dart.legacy(event.Event))
  }));
  payment_bloc.EventCancelPayment = class EventCancelPayment extends payment_bloc.PaymentEvent {};
  (payment_bloc.EventCancelPayment.new = function() {
    payment_bloc.EventCancelPayment.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventCancelPayment.prototype;
  dart.addTypeTests(payment_bloc.EventCancelPayment);
  dart.addTypeCaches(payment_bloc.EventCancelPayment);
  dart.setLibraryUri(payment_bloc.EventCancelPayment, I[0]);
  payment_bloc.EventChangePaymentMethod = class EventChangePaymentMethod extends payment_bloc.PaymentEvent {};
  (payment_bloc.EventChangePaymentMethod.new = function() {
    payment_bloc.EventChangePaymentMethod.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventChangePaymentMethod.prototype;
  dart.addTypeTests(payment_bloc.EventChangePaymentMethod);
  dart.addTypeCaches(payment_bloc.EventChangePaymentMethod);
  dart.setLibraryUri(payment_bloc.EventChangePaymentMethod, I[0]);
  payment_bloc.EventAddPaymentMethod = class EventAddPaymentMethod extends payment_bloc.PaymentEvent {};
  (payment_bloc.EventAddPaymentMethod.new = function() {
    payment_bloc.EventAddPaymentMethod.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventAddPaymentMethod.prototype;
  dart.addTypeTests(payment_bloc.EventAddPaymentMethod);
  dart.addTypeCaches(payment_bloc.EventAddPaymentMethod);
  dart.setLibraryUri(payment_bloc.EventAddPaymentMethod, I[0]);
  var paymentMethod$ = dart.privateName(payment_bloc, "EventConfirmSetupIntent.paymentMethod");
  var saveCreditCard$ = dart.privateName(payment_bloc, "EventConfirmSetupIntent.saveCreditCard");
  payment_bloc.EventConfirmSetupIntent = class EventConfirmSetupIntent extends payment_bloc.PaymentEvent {
    get paymentMethod() {
      return this[paymentMethod$];
    }
    set paymentMethod(value) {
      super.paymentMethod = value;
    }
    get saveCreditCard() {
      return this[saveCreditCard$];
    }
    set saveCreditCard(value) {
      super.saveCreditCard = value;
    }
  };
  (payment_bloc.EventConfirmSetupIntent.new = function(paymentMethod, saveCreditCard) {
    this[paymentMethod$] = paymentMethod;
    this[saveCreditCard$] = saveCreditCard;
    payment_bloc.EventConfirmSetupIntent.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventConfirmSetupIntent.prototype;
  dart.addTypeTests(payment_bloc.EventConfirmSetupIntent);
  dart.addTypeCaches(payment_bloc.EventConfirmSetupIntent);
  dart.setLibraryUri(payment_bloc.EventConfirmSetupIntent, I[0]);
  dart.setFieldSignature(payment_bloc.EventConfirmSetupIntent, () => ({
    __proto__: dart.getFields(payment_bloc.EventConfirmSetupIntent.__proto__),
    paymentMethod: dart.finalFieldType(dart.legacy(payment_methods_screen.PaymentMethod)),
    saveCreditCard: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var paymentMethod$0 = dart.privateName(payment_bloc, "EventConfirmSingleUseIntent.paymentMethod");
  payment_bloc.EventConfirmSingleUseIntent = class EventConfirmSingleUseIntent extends payment_bloc.PaymentEvent {
    get paymentMethod() {
      return this[paymentMethod$0];
    }
    set paymentMethod(value) {
      super.paymentMethod = value;
    }
  };
  (payment_bloc.EventConfirmSingleUseIntent.new = function(paymentMethod) {
    this[paymentMethod$0] = paymentMethod;
    payment_bloc.EventConfirmSingleUseIntent.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventConfirmSingleUseIntent.prototype;
  dart.addTypeTests(payment_bloc.EventConfirmSingleUseIntent);
  dart.addTypeCaches(payment_bloc.EventConfirmSingleUseIntent);
  dart.setLibraryUri(payment_bloc.EventConfirmSingleUseIntent, I[0]);
  dart.setFieldSignature(payment_bloc.EventConfirmSingleUseIntent, () => ({
    __proto__: dart.getFields(payment_bloc.EventConfirmSingleUseIntent.__proto__),
    paymentMethod: dart.finalFieldType(dart.legacy(payment_methods_screen.PaymentMethod))
  }));
  var clientSecret$ = dart.privateName(payment_bloc, "EventConfirmPayment.clientSecret");
  var paymentMethodId$ = dart.privateName(payment_bloc, "EventConfirmPayment.paymentMethodId");
  payment_bloc.EventConfirmPayment = class EventConfirmPayment extends payment_bloc.PaymentEvent {
    get clientSecret() {
      return this[clientSecret$];
    }
    set clientSecret(value) {
      super.clientSecret = value;
    }
    get paymentMethodId() {
      return this[paymentMethodId$];
    }
    set paymentMethodId(value) {
      super.paymentMethodId = value;
    }
  };
  (payment_bloc.EventConfirmPayment.new = function(clientSecret, paymentMethodId) {
    this[clientSecret$] = clientSecret;
    this[paymentMethodId$] = paymentMethodId;
    payment_bloc.EventConfirmPayment.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventConfirmPayment.prototype;
  dart.addTypeTests(payment_bloc.EventConfirmPayment);
  dart.addTypeCaches(payment_bloc.EventConfirmPayment);
  dart.setLibraryUri(payment_bloc.EventConfirmPayment, I[0]);
  dart.setFieldSignature(payment_bloc.EventConfirmPayment, () => ({
    __proto__: dart.getFields(payment_bloc.EventConfirmPayment.__proto__),
    clientSecret: dart.finalFieldType(dart.legacy(core.String)),
    paymentMethodId: dart.finalFieldType(dart.legacy(core.String))
  }));
  var selectedRelease$ = dart.privateName(payment_bloc, "EventRequestPI.selectedRelease");
  var quantity$ = dart.privateName(payment_bloc, "EventRequestPI.quantity");
  var discount$ = dart.privateName(payment_bloc, "EventRequestPI.discount");
  payment_bloc.EventRequestPI = class EventRequestPI extends payment_bloc.PaymentEvent {
    get selectedRelease() {
      return this[selectedRelease$];
    }
    set selectedRelease(value) {
      super.selectedRelease = value;
    }
    get quantity() {
      return this[quantity$];
    }
    set quantity(value) {
      super.quantity = value;
    }
    get discount() {
      return this[discount$];
    }
    set discount(value) {
      super.discount = value;
    }
  };
  (payment_bloc.EventRequestPI.new = function(selectedRelease, quantity, discount) {
    this[selectedRelease$] = selectedRelease;
    this[quantity$] = quantity;
    this[discount$] = discount;
    payment_bloc.EventRequestPI.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventRequestPI.prototype;
  dart.addTypeTests(payment_bloc.EventRequestPI);
  dart.addTypeCaches(payment_bloc.EventRequestPI);
  dart.setLibraryUri(payment_bloc.EventRequestPI, I[0]);
  dart.setFieldSignature(payment_bloc.EventRequestPI, () => ({
    __proto__: dart.getFields(payment_bloc.EventRequestPI.__proto__),
    selectedRelease: dart.finalFieldType(dart.legacy(ticket_release.TicketRelease)),
    quantity: dart.finalFieldType(dart.legacy(core.int)),
    discount: dart.finalFieldType(dart.legacy(discount.Discount))
  }));
  var selectedRelease$0 = dart.privateName(payment_bloc, "EventTicketSelected.selectedRelease");
  var managers$ = dart.privateName(payment_bloc, "EventTicketSelected.managers");
  payment_bloc.EventTicketSelected = class EventTicketSelected extends payment_bloc.PaymentEvent {
    get selectedRelease() {
      return this[selectedRelease$0];
    }
    set selectedRelease(value) {
      super.selectedRelease = value;
    }
    get managers() {
      return this[managers$];
    }
    set managers(value) {
      super.managers = value;
    }
  };
  (payment_bloc.EventTicketSelected.new = function(managers, selectedRelease) {
    this[managers$] = managers;
    this[selectedRelease$0] = selectedRelease;
    payment_bloc.EventTicketSelected.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventTicketSelected.prototype;
  dart.addTypeTests(payment_bloc.EventTicketSelected);
  dart.addTypeCaches(payment_bloc.EventTicketSelected);
  dart.setLibraryUri(payment_bloc.EventTicketSelected, I[0]);
  dart.setFieldSignature(payment_bloc.EventTicketSelected, () => ({
    __proto__: dart.getFields(payment_bloc.EventTicketSelected.__proto__),
    selectedRelease: dart.finalFieldType(dart.legacy(ticket_release.TicketRelease)),
    managers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(release_manager.ReleaseManager))))
  }));
  var event$0 = dart.privateName(payment_bloc, "EventLoadAvailableReleases.event");
  payment_bloc.EventLoadAvailableReleases = class EventLoadAvailableReleases extends payment_bloc.PaymentEvent {
    get event() {
      return this[event$0];
    }
    set event(value) {
      super.event = value;
    }
  };
  (payment_bloc.EventLoadAvailableReleases.new = function(event) {
    this[event$0] = event;
    payment_bloc.EventLoadAvailableReleases.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventLoadAvailableReleases.prototype;
  dart.addTypeTests(payment_bloc.EventLoadAvailableReleases);
  dart.addTypeCaches(payment_bloc.EventLoadAvailableReleases);
  dart.setLibraryUri(payment_bloc.EventLoadAvailableReleases, I[0]);
  dart.setFieldSignature(payment_bloc.EventLoadAvailableReleases, () => ({
    __proto__: dart.getFields(payment_bloc.EventLoadAvailableReleases.__proto__),
    event: dart.finalFieldType(dart.legacy(event.Event))
  }));
  var code$ = dart.privateName(payment_bloc, "EventApplyDiscount.code");
  var selectedRelease$1 = dart.privateName(payment_bloc, "EventApplyDiscount.selectedRelease");
  payment_bloc.EventApplyDiscount = class EventApplyDiscount extends payment_bloc.PaymentEvent {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get selectedRelease() {
      return this[selectedRelease$1];
    }
    set selectedRelease(value) {
      super.selectedRelease = value;
    }
  };
  (payment_bloc.EventApplyDiscount.new = function(code, selectedRelease) {
    this[code$] = code;
    this[selectedRelease$1] = selectedRelease;
    payment_bloc.EventApplyDiscount.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.EventApplyDiscount.prototype;
  dart.addTypeTests(payment_bloc.EventApplyDiscount);
  dart.addTypeCaches(payment_bloc.EventApplyDiscount);
  dart.setLibraryUri(payment_bloc.EventApplyDiscount, I[0]);
  dart.setFieldSignature(payment_bloc.EventApplyDiscount, () => ({
    __proto__: dart.getFields(payment_bloc.EventApplyDiscount.__proto__),
    code: dart.finalFieldType(dart.legacy(core.String)),
    selectedRelease: dart.finalFieldType(dart.legacy(ticket_release.TicketRelease))
  }));
  payment_bloc.StateInitial = class StateInitial extends payment_bloc.PaymentState {};
  (payment_bloc.StateInitial.new = function() {
    payment_bloc.StateInitial.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateInitial.prototype;
  dart.addTypeTests(payment_bloc.StateInitial);
  dart.addTypeCaches(payment_bloc.StateInitial);
  dart.setLibraryUri(payment_bloc.StateInitial, I[0]);
  payment_bloc.StateLoading = class StateLoading extends payment_bloc.PaymentState {};
  (payment_bloc.StateLoading.new = function() {
    payment_bloc.StateLoading.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateLoading.prototype;
  dart.addTypeTests(payment_bloc.StateLoading);
  dart.addTypeCaches(payment_bloc.StateLoading);
  dart.setLibraryUri(payment_bloc.StateLoading, I[0]);
  payment_bloc.StateLoadingPaymentMethod = class StateLoadingPaymentMethod extends payment_bloc.PaymentState {};
  (payment_bloc.StateLoadingPaymentMethod.new = function() {
    payment_bloc.StateLoadingPaymentMethod.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateLoadingPaymentMethod.prototype;
  dart.addTypeTests(payment_bloc.StateLoadingPaymentMethod);
  dart.addTypeCaches(payment_bloc.StateLoadingPaymentMethod);
  dart.setLibraryUri(payment_bloc.StateLoadingPaymentMethod, I[0]);
  payment_bloc.StateLoadingPaymentIntent = class StateLoadingPaymentIntent extends payment_bloc.PaymentState {};
  (payment_bloc.StateLoadingPaymentIntent.new = function() {
    payment_bloc.StateLoadingPaymentIntent.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateLoadingPaymentIntent.prototype;
  dart.addTypeTests(payment_bloc.StateLoadingPaymentIntent);
  dart.addTypeCaches(payment_bloc.StateLoadingPaymentIntent);
  dart.setLibraryUri(payment_bloc.StateLoadingPaymentIntent, I[0]);
  payment_bloc.StateNoTicketsAvailable = class StateNoTicketsAvailable extends payment_bloc.PaymentState {};
  (payment_bloc.StateNoTicketsAvailable.new = function() {
    payment_bloc.StateNoTicketsAvailable.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateNoTicketsAvailable.prototype;
  dart.addTypeTests(payment_bloc.StateNoTicketsAvailable);
  dart.addTypeCaches(payment_bloc.StateNoTicketsAvailable);
  dart.setLibraryUri(payment_bloc.StateNoTicketsAvailable, I[0]);
  payment_bloc.StateAddPaymentMethod = class StateAddPaymentMethod extends payment_bloc.PaymentState {};
  (payment_bloc.StateAddPaymentMethod.new = function() {
    payment_bloc.StateAddPaymentMethod.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateAddPaymentMethod.prototype;
  dart.addTypeTests(payment_bloc.StateAddPaymentMethod);
  dart.addTypeCaches(payment_bloc.StateAddPaymentMethod);
  dart.setLibraryUri(payment_bloc.StateAddPaymentMethod, I[0]);
  payment_bloc.StateUpdating = class StateUpdating extends payment_bloc.PaymentState {};
  (payment_bloc.StateUpdating.new = function() {
    payment_bloc.StateUpdating.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateUpdating.prototype;
  dart.addTypeTests(payment_bloc.StateUpdating);
  dart.addTypeCaches(payment_bloc.StateUpdating);
  dart.setLibraryUri(payment_bloc.StateUpdating, I[0]);
  var managers$0 = dart.privateName(payment_bloc, "StatePaymentOptionAvailable.managers");
  var discount$0 = dart.privateName(payment_bloc, "StatePaymentOptionAvailable.discount");
  payment_bloc.StatePaymentOptionAvailable = class StatePaymentOptionAvailable extends payment_bloc.PaymentState {
    get managers() {
      return this[managers$0];
    }
    set managers(value) {
      super.managers = value;
    }
    get discount() {
      return this[discount$0];
    }
    set discount(value) {
      super.discount = value;
    }
  };
  (payment_bloc.StatePaymentOptionAvailable.new = function(managers, discount) {
    this[managers$0] = managers;
    this[discount$0] = discount;
    payment_bloc.StatePaymentOptionAvailable.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StatePaymentOptionAvailable.prototype;
  dart.addTypeTests(payment_bloc.StatePaymentOptionAvailable);
  dart.addTypeCaches(payment_bloc.StatePaymentOptionAvailable);
  dart.setLibraryUri(payment_bloc.StatePaymentOptionAvailable, I[0]);
  dart.setFieldSignature(payment_bloc.StatePaymentOptionAvailable, () => ({
    __proto__: dart.getFields(payment_bloc.StatePaymentOptionAvailable.__proto__),
    managers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(release_manager.ReleaseManager)))),
    discount: dart.finalFieldType(dart.legacy(discount.Discount))
  }));
  payment_bloc.StateFreeTicketSelected = class StateFreeTicketSelected extends payment_bloc.StatePaymentOptionAvailable {};
  (payment_bloc.StateFreeTicketSelected.new = function(releases, opts) {
    let discount = opts && 'discount' in opts ? opts.discount : null;
    payment_bloc.StateFreeTicketSelected.__proto__.new.call(this, T.ListLOfReleaseManagerL().as(releases), T.DiscountL().as(discount));
    ;
  }).prototype = payment_bloc.StateFreeTicketSelected.prototype;
  dart.addTypeTests(payment_bloc.StateFreeTicketSelected);
  dart.addTypeCaches(payment_bloc.StateFreeTicketSelected);
  dart.setLibraryUri(payment_bloc.StateFreeTicketSelected, I[0]);
  payment_bloc.StateFreeTicketQuantitySelected = class StateFreeTicketQuantitySelected extends payment_bloc.StatePaymentOptionAvailable {};
  (payment_bloc.StateFreeTicketQuantitySelected.new = function(releases, opts) {
    let discount = opts && 'discount' in opts ? opts.discount : null;
    payment_bloc.StateFreeTicketQuantitySelected.__proto__.new.call(this, T.ListLOfReleaseManagerL().as(releases), T.DiscountL().as(discount));
    ;
  }).prototype = payment_bloc.StateFreeTicketQuantitySelected.prototype;
  dart.addTypeTests(payment_bloc.StateFreeTicketQuantitySelected);
  dart.addTypeCaches(payment_bloc.StateFreeTicketQuantitySelected);
  dart.setLibraryUri(payment_bloc.StateFreeTicketQuantitySelected, I[0]);
  payment_bloc.StatePaidTicketSelected = class StatePaidTicketSelected extends payment_bloc.StatePaymentOptionAvailable {};
  (payment_bloc.StatePaidTicketSelected.new = function(releases, opts) {
    let discount = opts && 'discount' in opts ? opts.discount : null;
    payment_bloc.StatePaidTicketSelected.__proto__.new.call(this, T.ListLOfReleaseManagerL().as(releases), T.DiscountL().as(discount));
    ;
  }).prototype = payment_bloc.StatePaidTicketSelected.prototype;
  dart.addTypeTests(payment_bloc.StatePaidTicketSelected);
  dart.addTypeCaches(payment_bloc.StatePaidTicketSelected);
  dart.setLibraryUri(payment_bloc.StatePaidTicketSelected, I[0]);
  payment_bloc.StatePaidTicketQuantitySelected = class StatePaidTicketQuantitySelected extends payment_bloc.StatePaymentOptionAvailable {};
  (payment_bloc.StatePaidTicketQuantitySelected.new = function(releases, opts) {
    let discount = opts && 'discount' in opts ? opts.discount : null;
    payment_bloc.StatePaidTicketQuantitySelected.__proto__.new.call(this, T.ListLOfReleaseManagerL().as(releases), T.DiscountL().as(discount));
    ;
  }).prototype = payment_bloc.StatePaidTicketQuantitySelected.prototype;
  dart.addTypeTests(payment_bloc.StatePaidTicketQuantitySelected);
  dart.addTypeCaches(payment_bloc.StatePaidTicketQuantitySelected);
  dart.setLibraryUri(payment_bloc.StatePaidTicketQuantitySelected, I[0]);
  var release$ = dart.privateName(payment_bloc, "StatePaymentCompleted.release");
  var quantity$0 = dart.privateName(payment_bloc, "StatePaymentCompleted.quantity");
  var message$ = dart.privateName(payment_bloc, "StatePaymentCompleted.message");
  payment_bloc.StatePaymentCompleted = class StatePaymentCompleted extends payment_bloc.PaymentState {
    get release() {
      return this[release$];
    }
    set release(value) {
      super.release = value;
    }
    get quantity() {
      return this[quantity$0];
    }
    set quantity(value) {
      super.quantity = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
  };
  (payment_bloc.StatePaymentCompleted.new = function(message, release, quantity) {
    this[message$] = message;
    this[release$] = release;
    this[quantity$0] = quantity;
    payment_bloc.StatePaymentCompleted.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StatePaymentCompleted.prototype;
  dart.addTypeTests(payment_bloc.StatePaymentCompleted);
  dart.addTypeCaches(payment_bloc.StatePaymentCompleted);
  dart.setLibraryUri(payment_bloc.StatePaymentCompleted, I[0]);
  dart.setFieldSignature(payment_bloc.StatePaymentCompleted, () => ({
    __proto__: dart.getFields(payment_bloc.StatePaymentCompleted.__proto__),
    release: dart.finalFieldType(dart.legacy(ticket_release.TicketRelease)),
    quantity: dart.finalFieldType(dart.legacy(core.int)),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  var release$0 = dart.privateName(payment_bloc, "StateFreeTicketIssued.release");
  var message$0 = dart.privateName(payment_bloc, "StateFreeTicketIssued.message");
  payment_bloc.StateFreeTicketIssued = class StateFreeTicketIssued extends payment_bloc.PaymentState {
    get release() {
      return this[release$0];
    }
    set release(value) {
      super.release = value;
    }
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
  };
  (payment_bloc.StateFreeTicketIssued.new = function(message, release) {
    this[message$0] = message;
    this[release$0] = release;
    payment_bloc.StateFreeTicketIssued.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateFreeTicketIssued.prototype;
  dart.addTypeTests(payment_bloc.StateFreeTicketIssued);
  dart.addTypeCaches(payment_bloc.StateFreeTicketIssued);
  dart.setLibraryUri(payment_bloc.StateFreeTicketIssued, I[0]);
  dart.setFieldSignature(payment_bloc.StateFreeTicketIssued, () => ({
    __proto__: dart.getFields(payment_bloc.StateFreeTicketIssued.__proto__),
    release: dart.finalFieldType(dart.legacy(ticket_release.TicketRelease)),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  var message$1 = dart.privateName(payment_bloc, "StatePaymentError.message");
  payment_bloc.StatePaymentError = class StatePaymentError extends payment_bloc.PaymentState {
    get message() {
      return this[message$1];
    }
    set message(value) {
      super.message = value;
    }
  };
  (payment_bloc.StatePaymentError.new = function(message) {
    this[message$1] = message;
    payment_bloc.StatePaymentError.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StatePaymentError.prototype;
  dart.addTypeTests(payment_bloc.StatePaymentError);
  dart.addTypeCaches(payment_bloc.StatePaymentError);
  dart.setLibraryUri(payment_bloc.StatePaymentError, I[0]);
  dart.setFieldSignature(payment_bloc.StatePaymentError, () => ({
    __proto__: dart.getFields(payment_bloc.StatePaymentError.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  var setupIntentId$ = dart.privateName(payment_bloc, "StateSIRequiresPaymentMethod.setupIntentId");
  payment_bloc.StateSIRequiresPaymentMethod = class StateSIRequiresPaymentMethod extends payment_bloc.PaymentState {
    get setupIntentId() {
      return this[setupIntentId$];
    }
    set setupIntentId(value) {
      super.setupIntentId = value;
    }
  };
  (payment_bloc.StateSIRequiresPaymentMethod.new = function(setupIntentId) {
    this[setupIntentId$] = setupIntentId;
    payment_bloc.StateSIRequiresPaymentMethod.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateSIRequiresPaymentMethod.prototype;
  dart.addTypeTests(payment_bloc.StateSIRequiresPaymentMethod);
  dart.addTypeCaches(payment_bloc.StateSIRequiresPaymentMethod);
  dart.setLibraryUri(payment_bloc.StateSIRequiresPaymentMethod, I[0]);
  dart.setFieldSignature(payment_bloc.StateSIRequiresPaymentMethod, () => ({
    __proto__: dart.getFields(payment_bloc.StateSIRequiresPaymentMethod.__proto__),
    setupIntentId: dart.finalFieldType(dart.legacy(core.String))
  }));
  payment_bloc.StateDiscountCodeInvalid = class StateDiscountCodeInvalid extends payment_bloc.PaymentState {};
  (payment_bloc.StateDiscountCodeInvalid.new = function() {
    payment_bloc.StateDiscountCodeInvalid.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateDiscountCodeInvalid.prototype;
  dart.addTypeTests(payment_bloc.StateDiscountCodeInvalid);
  dart.addTypeCaches(payment_bloc.StateDiscountCodeInvalid);
  dart.setLibraryUri(payment_bloc.StateDiscountCodeInvalid, I[0]);
  payment_bloc.StateDiscountCodeLoading = class StateDiscountCodeLoading extends payment_bloc.PaymentState {};
  (payment_bloc.StateDiscountCodeLoading.new = function() {
    payment_bloc.StateDiscountCodeLoading.__proto__.new.call(this);
    ;
  }).prototype = payment_bloc.StateDiscountCodeLoading.prototype;
  dart.addTypeTests(payment_bloc.StateDiscountCodeLoading);
  dart.addTypeCaches(payment_bloc.StateDiscountCodeLoading);
  dart.setLibraryUri(payment_bloc.StateDiscountCodeLoading, I[0]);
  dart.trackLibraries("packages/ticketapp/pages/payment/bloc/payment_bloc.dart", {
    "package:ticketapp/pages/payment/bloc/payment_bloc.dart": payment_bloc
  }, {
    "package:ticketapp/pages/payment/bloc/payment_bloc.dart": ["payment_event.dart", "payment_state.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["payment_event.dart","payment_state.dart","payment_bloc.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/ticketapp/pages/payment/bloc/payment_bloc.dart.lib.js"}');
  // Exports:
  return {
    pages__payment__bloc__payment_bloc: payment_bloc
  };
}));

//# sourceMappingURL=payment_bloc.dart.lib.js.map
