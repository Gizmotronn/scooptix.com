define(['dart_sdk'], (function load__packages__device_info_platform_interface__model__android_device_info_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var android_device_info = Object.create(dart.library);
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = ["package:device_info_platform_interface/model/android_device_info.dart"];
  var version$ = dart.privateName(android_device_info, "AndroidDeviceInfo.version");
  var board$ = dart.privateName(android_device_info, "AndroidDeviceInfo.board");
  var bootloader$ = dart.privateName(android_device_info, "AndroidDeviceInfo.bootloader");
  var brand$ = dart.privateName(android_device_info, "AndroidDeviceInfo.brand");
  var device$ = dart.privateName(android_device_info, "AndroidDeviceInfo.device");
  var display$ = dart.privateName(android_device_info, "AndroidDeviceInfo.display");
  var fingerprint$ = dart.privateName(android_device_info, "AndroidDeviceInfo.fingerprint");
  var hardware$ = dart.privateName(android_device_info, "AndroidDeviceInfo.hardware");
  var host$ = dart.privateName(android_device_info, "AndroidDeviceInfo.host");
  var id$ = dart.privateName(android_device_info, "AndroidDeviceInfo.id");
  var manufacturer$ = dart.privateName(android_device_info, "AndroidDeviceInfo.manufacturer");
  var model$ = dart.privateName(android_device_info, "AndroidDeviceInfo.model");
  var product$ = dart.privateName(android_device_info, "AndroidDeviceInfo.product");
  var supported32BitAbis$ = dart.privateName(android_device_info, "AndroidDeviceInfo.supported32BitAbis");
  var supported64BitAbis$ = dart.privateName(android_device_info, "AndroidDeviceInfo.supported64BitAbis");
  var supportedAbis$ = dart.privateName(android_device_info, "AndroidDeviceInfo.supportedAbis");
  var tags$ = dart.privateName(android_device_info, "AndroidDeviceInfo.tags");
  var type$ = dart.privateName(android_device_info, "AndroidDeviceInfo.type");
  var isPhysicalDevice$ = dart.privateName(android_device_info, "AndroidDeviceInfo.isPhysicalDevice");
  var androidId$ = dart.privateName(android_device_info, "AndroidDeviceInfo.androidId");
  var systemFeatures$ = dart.privateName(android_device_info, "AndroidDeviceInfo.systemFeatures");
  android_device_info.AndroidDeviceInfo = class AndroidDeviceInfo extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
    get board() {
      return this[board$];
    }
    set board(value) {
      super.board = value;
    }
    get bootloader() {
      return this[bootloader$];
    }
    set bootloader(value) {
      super.bootloader = value;
    }
    get brand() {
      return this[brand$];
    }
    set brand(value) {
      super.brand = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get display() {
      return this[display$];
    }
    set display(value) {
      super.display = value;
    }
    get fingerprint() {
      return this[fingerprint$];
    }
    set fingerprint(value) {
      super.fingerprint = value;
    }
    get hardware() {
      return this[hardware$];
    }
    set hardware(value) {
      super.hardware = value;
    }
    get host() {
      return this[host$];
    }
    set host(value) {
      super.host = value;
    }
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get manufacturer() {
      return this[manufacturer$];
    }
    set manufacturer(value) {
      super.manufacturer = value;
    }
    get model() {
      return this[model$];
    }
    set model(value) {
      super.model = value;
    }
    get product() {
      return this[product$];
    }
    set product(value) {
      super.product = value;
    }
    get supported32BitAbis() {
      return this[supported32BitAbis$];
    }
    set supported32BitAbis(value) {
      super.supported32BitAbis = value;
    }
    get supported64BitAbis() {
      return this[supported64BitAbis$];
    }
    set supported64BitAbis(value) {
      super.supported64BitAbis = value;
    }
    get supportedAbis() {
      return this[supportedAbis$];
    }
    set supportedAbis(value) {
      super.supportedAbis = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get isPhysicalDevice() {
      return this[isPhysicalDevice$];
    }
    set isPhysicalDevice(value) {
      super.isPhysicalDevice = value;
    }
    get androidId() {
      return this[androidId$];
    }
    set androidId(value) {
      super.androidId = value;
    }
    get systemFeatures() {
      return this[systemFeatures$];
    }
    set systemFeatures(value) {
      super.systemFeatures = value;
    }
    static fromMap(map) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      return new android_device_info.AndroidDeviceInfo.new({version: android_device_info.AndroidBuildVersion._fromMap(T.MapLOfStringL$dynamic().as((t0$ = (t0 = map[$_get]("version"), t0 == null ? null : dart.dgsend(t0, [T.StringL(), dart.dynamic], 'cast', [])), t0$ == null ? new (T.IdentityMapOfStringL$dynamic()).new() : t0$))), board: T.StringL().as(map[$_get]("board")), bootloader: T.StringL().as(map[$_get]("bootloader")), brand: T.StringL().as(map[$_get]("brand")), device: T.StringL().as(map[$_get]("device")), display: T.StringL().as(map[$_get]("display")), fingerprint: T.StringL().as(map[$_get]("fingerprint")), hardware: T.StringL().as(map[$_get]("hardware")), host: T.StringL().as(map[$_get]("host")), id: T.StringL().as(map[$_get]("id")), manufacturer: T.StringL().as(map[$_get]("manufacturer")), model: T.StringL().as(map[$_get]("model")), product: T.StringL().as(map[$_get]("product")), supported32BitAbis: android_device_info.AndroidDeviceInfo._fromList((t0$0 = map[$_get]("supported32BitAbis"), t0$0 == null ? [] : t0$0)), supported64BitAbis: android_device_info.AndroidDeviceInfo._fromList((t0$1 = map[$_get]("supported64BitAbis"), t0$1 == null ? [] : t0$1)), supportedAbis: android_device_info.AndroidDeviceInfo._fromList((t0$2 = map[$_get]("supportedAbis"), t0$2 == null ? [] : t0$2)), tags: T.StringL().as(map[$_get]("tags")), type: T.StringL().as(map[$_get]("type")), isPhysicalDevice: T.boolL().as(map[$_get]("isPhysicalDevice")), androidId: T.StringL().as(map[$_get]("androidId")), systemFeatures: android_device_info.AndroidDeviceInfo._fromList((t0$3 = map[$_get]("systemFeatures"), t0$3 == null ? [] : t0$3))});
    }
    static _fromList(message) {
      let list = T.ListL().as(message);
      return T.ListOfStringL().from(list);
    }
  };
  (android_device_info.AndroidDeviceInfo.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let board = opts && 'board' in opts ? opts.board : null;
    let bootloader = opts && 'bootloader' in opts ? opts.bootloader : null;
    let brand = opts && 'brand' in opts ? opts.brand : null;
    let device = opts && 'device' in opts ? opts.device : null;
    let display = opts && 'display' in opts ? opts.display : null;
    let fingerprint = opts && 'fingerprint' in opts ? opts.fingerprint : null;
    let hardware = opts && 'hardware' in opts ? opts.hardware : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let manufacturer = opts && 'manufacturer' in opts ? opts.manufacturer : null;
    let model = opts && 'model' in opts ? opts.model : null;
    let product = opts && 'product' in opts ? opts.product : null;
    let supported32BitAbis = opts && 'supported32BitAbis' in opts ? opts.supported32BitAbis : null;
    let supported64BitAbis = opts && 'supported64BitAbis' in opts ? opts.supported64BitAbis : null;
    let supportedAbis = opts && 'supportedAbis' in opts ? opts.supportedAbis : null;
    let tags = opts && 'tags' in opts ? opts.tags : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let isPhysicalDevice = opts && 'isPhysicalDevice' in opts ? opts.isPhysicalDevice : null;
    let androidId = opts && 'androidId' in opts ? opts.androidId : null;
    let systemFeatures = opts && 'systemFeatures' in opts ? opts.systemFeatures : null;
    this[version$] = version;
    this[board$] = board;
    this[bootloader$] = bootloader;
    this[brand$] = brand;
    this[device$] = device;
    this[display$] = display;
    this[fingerprint$] = fingerprint;
    this[hardware$] = hardware;
    this[host$] = host;
    this[id$] = id;
    this[manufacturer$] = manufacturer;
    this[model$] = model;
    this[product$] = product;
    this[tags$] = tags;
    this[type$] = type;
    this[isPhysicalDevice$] = isPhysicalDevice;
    this[androidId$] = androidId;
    this[supported32BitAbis$] = T.ListOfStringL().unmodifiable(supported32BitAbis);
    this[supported64BitAbis$] = T.ListOfStringL().unmodifiable(supported64BitAbis);
    this[supportedAbis$] = T.ListOfStringL().unmodifiable(supportedAbis);
    this[systemFeatures$] = T.ListOfStringL().unmodifiable(systemFeatures);
    ;
  }).prototype = android_device_info.AndroidDeviceInfo.prototype;
  dart.addTypeTests(android_device_info.AndroidDeviceInfo);
  dart.addTypeCaches(android_device_info.AndroidDeviceInfo);
  dart.setLibraryUri(android_device_info.AndroidDeviceInfo, I[0]);
  dart.setFieldSignature(android_device_info.AndroidDeviceInfo, () => ({
    __proto__: dart.getFields(android_device_info.AndroidDeviceInfo.__proto__),
    version: dart.finalFieldType(dart.legacy(android_device_info.AndroidBuildVersion)),
    board: dart.finalFieldType(dart.legacy(core.String)),
    bootloader: dart.finalFieldType(dart.legacy(core.String)),
    brand: dart.finalFieldType(dart.legacy(core.String)),
    device: dart.finalFieldType(dart.legacy(core.String)),
    display: dart.finalFieldType(dart.legacy(core.String)),
    fingerprint: dart.finalFieldType(dart.legacy(core.String)),
    hardware: dart.finalFieldType(dart.legacy(core.String)),
    host: dart.finalFieldType(dart.legacy(core.String)),
    id: dart.finalFieldType(dart.legacy(core.String)),
    manufacturer: dart.finalFieldType(dart.legacy(core.String)),
    model: dart.finalFieldType(dart.legacy(core.String)),
    product: dart.finalFieldType(dart.legacy(core.String)),
    supported32BitAbis: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    supported64BitAbis: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    supportedAbis: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    tags: dart.finalFieldType(dart.legacy(core.String)),
    type: dart.finalFieldType(dart.legacy(core.String)),
    isPhysicalDevice: dart.finalFieldType(dart.legacy(core.bool)),
    androidId: dart.finalFieldType(dart.legacy(core.String)),
    systemFeatures: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var baseOS$ = dart.privateName(android_device_info, "AndroidBuildVersion.baseOS");
  var codename$ = dart.privateName(android_device_info, "AndroidBuildVersion.codename");
  var incremental$ = dart.privateName(android_device_info, "AndroidBuildVersion.incremental");
  var previewSdkInt$ = dart.privateName(android_device_info, "AndroidBuildVersion.previewSdkInt");
  var release$ = dart.privateName(android_device_info, "AndroidBuildVersion.release");
  var sdkInt$ = dart.privateName(android_device_info, "AndroidBuildVersion.sdkInt");
  var securityPatch$ = dart.privateName(android_device_info, "AndroidBuildVersion.securityPatch");
  android_device_info.AndroidBuildVersion = class AndroidBuildVersion extends core.Object {
    get baseOS() {
      return this[baseOS$];
    }
    set baseOS(value) {
      super.baseOS = value;
    }
    get codename() {
      return this[codename$];
    }
    set codename(value) {
      super.codename = value;
    }
    get incremental() {
      return this[incremental$];
    }
    set incremental(value) {
      super.incremental = value;
    }
    get previewSdkInt() {
      return this[previewSdkInt$];
    }
    set previewSdkInt(value) {
      super.previewSdkInt = value;
    }
    get release() {
      return this[release$];
    }
    set release(value) {
      super.release = value;
    }
    get sdkInt() {
      return this[sdkInt$];
    }
    set sdkInt(value) {
      super.sdkInt = value;
    }
    get securityPatch() {
      return this[securityPatch$];
    }
    set securityPatch(value) {
      super.securityPatch = value;
    }
    static _fromMap(map) {
      return new android_device_info.AndroidBuildVersion.__({baseOS: T.StringL().as(map[$_get]("baseOS")), codename: T.StringL().as(map[$_get]("codename")), incremental: T.StringL().as(map[$_get]("incremental")), previewSdkInt: T.intL().as(map[$_get]("previewSdkInt")), release: T.StringL().as(map[$_get]("release")), sdkInt: T.intL().as(map[$_get]("sdkInt")), securityPatch: T.StringL().as(map[$_get]("securityPatch"))});
    }
  };
  (android_device_info.AndroidBuildVersion.__ = function(opts) {
    let baseOS = opts && 'baseOS' in opts ? opts.baseOS : null;
    let codename = opts && 'codename' in opts ? opts.codename : null;
    let incremental = opts && 'incremental' in opts ? opts.incremental : null;
    let previewSdkInt = opts && 'previewSdkInt' in opts ? opts.previewSdkInt : null;
    let release = opts && 'release' in opts ? opts.release : null;
    let sdkInt = opts && 'sdkInt' in opts ? opts.sdkInt : null;
    let securityPatch = opts && 'securityPatch' in opts ? opts.securityPatch : null;
    this[baseOS$] = baseOS;
    this[codename$] = codename;
    this[incremental$] = incremental;
    this[previewSdkInt$] = previewSdkInt;
    this[release$] = release;
    this[sdkInt$] = sdkInt;
    this[securityPatch$] = securityPatch;
    ;
  }).prototype = android_device_info.AndroidBuildVersion.prototype;
  dart.addTypeTests(android_device_info.AndroidBuildVersion);
  dart.addTypeCaches(android_device_info.AndroidBuildVersion);
  dart.setLibraryUri(android_device_info.AndroidBuildVersion, I[0]);
  dart.setFieldSignature(android_device_info.AndroidBuildVersion, () => ({
    __proto__: dart.getFields(android_device_info.AndroidBuildVersion.__proto__),
    baseOS: dart.finalFieldType(dart.legacy(core.String)),
    codename: dart.finalFieldType(dart.legacy(core.String)),
    incremental: dart.finalFieldType(dart.legacy(core.String)),
    previewSdkInt: dart.finalFieldType(dart.legacy(core.int)),
    release: dart.finalFieldType(dart.legacy(core.String)),
    sdkInt: dart.finalFieldType(dart.legacy(core.int)),
    securityPatch: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.trackLibraries("packages/device_info_platform_interface/model/android_device_info.dart", {
    "package:device_info_platform_interface/model/android_device_info.dart": android_device_info
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["android_device_info.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqC4B;;;;;;IAGb;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGM;;;;;;IAGA;;;;;;IAGA;;;;;;IAGN;;;;;;IAGA;;;;;;IAGF;;;;;;IAGE;;;;;;IAgBM;;;;;;mBAGmC;;AACpD,YAAO,yDACwB,+EACe,YAAxC,AAAG,GAAA,QAAC,yBAAD,OAAa,2DAAb,cAAwC,6EACxC,AAAG,GAAA,QAAC,sCACC,AAAG,GAAA,QAAC,sCACT,AAAG,GAAA,QAAC,kCACH,AAAG,GAAA,QAAC,oCACH,AAAG,GAAA,QAAC,yCACA,AAAG,GAAA,QAAC,0CACP,AAAG,GAAA,QAAC,mCACR,AAAG,GAAA,QAAC,6BACN,AAAG,GAAA,QAAC,qCACM,AAAG,GAAA,QAAC,wCACX,AAAG,GAAA,QAAC,mCACF,AAAG,GAAA,QAAC,iCACO,iDAAoC,OAA1B,AAAG,GAAA,QAAC,uBAAD,eAA0B,iCACvC,iDAAoC,OAA1B,AAAG,GAAA,QAAC,uBAAD,eAA0B,4BAC5C,iDAA+B,OAArB,AAAG,GAAA,QAAC,kBAAD,eAAqB,kCAC3C,AAAG,GAAA,QAAC,+BACJ,AAAG,GAAA,QAAC,yCACQ,AAAG,GAAA,QAAC,gDACX,AAAG,GAAA,QAAC,+BACC,iDAAgC,OAAtB,AAAG,GAAA,QAAC,mBAAD,eAAsB;IAEvD;qBAGsC;AAChB,8BAAO,OAAO;AAClC,YAAO,wBAAkB,IAAI;IAC/B;;;QAtIO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACQ;QACA;QACA;QACR;QACA;QACA;QACA;QACQ;IApBR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAIA;IACA;IACA;IACA;IAEkB,4BAAE,+BAA0B,kBAAkB;IAC9C,4BAAE,+BAA0B,kBAAkB;IACnD,uBAAE,+BAA0B,aAAa;IACxC,wBAAE,+BAA0B,cAAc;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiInD;;;;;;IAGA;;;;;;IAGA;;;;;;IAGH;;;;;;IAGG;;;;;;IAKH;;;;;;IAGG;;;;;;oBAG4C;AACvD,YAA2B,wEACjB,AAAG,GAAA,QAAC,qCACF,AAAG,GAAA,QAAC,0CACD,AAAG,GAAA,QAAC,4CACF,AAAG,GAAA,QAAC,2CACV,AAAG,GAAA,QAAC,iCACL,AAAG,GAAA,QAAC,0CACG,AAAG,GAAA,QAAC;IAEvB;;;QA3CO;QACA;QACA;QACA;QACA;QACA;QACA;IANA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL","file":"../../../../../../../packages/device_info_platform_interface/model/android_device_info.dart.lib.js"}');
  // Exports:
  return {
    model__android_device_info: android_device_info
  };
}));

//# sourceMappingURL=android_device_info.dart.lib.js.map
