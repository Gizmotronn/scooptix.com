define(['dart_sdk', 'packages/cloud_firestore/cloud_firestore.dart', 'packages/ticketapp/model/discount.dart', 'packages/ticketapp/model/ticket.dart', 'packages/ticketapp/services/bugsnag_wrapper.dart', 'packages/ticketapp/repositories/user_repository.dart', 'packages/ticketapp/model/user.dart', 'packages/ticketapp/model/link_type/invitation.dart', 'packages/ticketapp/model/link_type/advertisementInvite.dart', 'packages/http/http.dart', 'packages/ticketapp/model/release_manager.dart', 'packages/cloud_firestore_platform_interface/src/set_options.dart', 'packages/ticketapp/model/link_type/promoterInvite.dart', 'packages/ticketapp/model/event.dart', 'packages/ticketapp/model/link_type/link_type.dart', 'packages/ticketapp/model/ticket_release.dart'], (function load__packages__ticketapp__repositories__ticket_repository_dart(dart_sdk, packages__cloud_firestore__cloud_firestore$46dart, packages__ticketapp__model__discount$46dart, packages__ticketapp__model__ticket$46dart, packages__ticketapp__services__bugsnag_wrapper$46dart, packages__ticketapp__repositories__user_repository$46dart, packages__ticketapp__model__user$46dart, packages__ticketapp__model__link_type__invitation$46dart, packages__ticketapp__model__link_type__advertisementInvite$46dart, packages__http__http$46dart, packages__ticketapp__model__release_manager$46dart, packages__cloud_firestore_platform_interface__src__set_options$46dart, packages__ticketapp__model__link_type__promoterInvite$46dart, packages__ticketapp__model__event$46dart, packages__ticketapp__model__link_type__link_type$46dart, packages__ticketapp__model__ticket_release$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const cloud_firestore = packages__cloud_firestore__cloud_firestore$46dart.cloud_firestore;
  const discount = packages__ticketapp__model__discount$46dart.model__discount;
  const ticket$ = packages__ticketapp__model__ticket$46dart.model__ticket;
  const bugsnag_wrapper = packages__ticketapp__services__bugsnag_wrapper$46dart.services__bugsnag_wrapper;
  const user_repository = packages__ticketapp__repositories__user_repository$46dart.repositories__user_repository;
  const user = packages__ticketapp__model__user$46dart.model__user;
  const invitation = packages__ticketapp__model__link_type__invitation$46dart.model__link_type__invitation;
  const advertisementInvite = packages__ticketapp__model__link_type__advertisementInvite$46dart.model__link_type__advertisementInvite;
  const http = packages__http__http$46dart.http;
  const release_manager = packages__ticketapp__model__release_manager$46dart.model__release_manager;
  const set_options = packages__cloud_firestore_platform_interface__src__set_options$46dart.src__set_options;
  const promoterInvite = packages__ticketapp__model__link_type__promoterInvite$46dart.model__link_type__promoterInvite;
  const event = packages__ticketapp__model__event$46dart.model__event;
  const link_type = packages__ticketapp__model__link_type__link_type$46dart.model__link_type__link_type;
  const ticket_release = packages__ticketapp__model__ticket_release$46dart.model__ticket_release;
  var ticket_repository = Object.create(dart.library);
  var $_get = dartx._get;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $_set = dartx._set;
  var $contains = dartx.contains;
  var $firstWhere = dartx.firstWhere;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    DiscountL: () => (T.DiscountL = dart.constFn(dart.legacy(discount.Discount)))(),
    TicketL: () => (T.TicketL = dart.constFn(dart.legacy(ticket$.Ticket)))(),
    JSArrayOfTicketL: () => (T.JSArrayOfTicketL = dart.constFn(_interceptors.JSArray$(T.TicketL())))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    QueryDocumentSnapshotL: () => (T.QueryDocumentSnapshotL = dart.constFn(dart.legacy(cloud_firestore.QueryDocumentSnapshot)))(),
    QueryDocumentSnapshotLToNull: () => (T.QueryDocumentSnapshotLToNull = dart.constFn(dart.fnType(core.Null, [T.QueryDocumentSnapshotL()])))(),
    ListOfTicketL: () => (T.ListOfTicketL = dart.constFn(core.List$(T.TicketL())))(),
    ListLOfTicketL: () => (T.ListLOfTicketL = dart.constFn(dart.legacy(T.ListOfTicketL())))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    InvitationL: () => (T.InvitationL = dart.constFn(dart.legacy(invitation.Invitation)))(),
    AdvertisementInviteL: () => (T.AdvertisementInviteL = dart.constFn(dart.legacy(advertisementInvite.AdvertisementInvite)))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    SocketExceptionL: () => (T.SocketExceptionL = dart.constFn(dart.legacy(io.SocketException)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    ReleaseManagerL: () => (T.ReleaseManagerL = dart.constFn(dart.legacy(release_manager.ReleaseManager)))(),
    ReleaseManagerLToboolL: () => (T.ReleaseManagerLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ReleaseManagerL()])))(),
    PromoterInviteL: () => (T.PromoterInviteL = dart.constFn(dart.legacy(promoterInvite.PromoterInvite)))(),
    FieldValueL: () => (T.FieldValueL = dart.constFn(dart.legacy(cloud_firestore.FieldValue)))(),
    IdentityMapOfStringL$FieldValueL: () => (T.IdentityMapOfStringL$FieldValueL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.FieldValueL())))(),
    MapOfStringL$FieldValueL: () => (T.MapOfStringL$FieldValueL = dart.constFn(core.Map$(T.StringL(), T.FieldValueL())))(),
    MapLOfStringL$FieldValueL: () => (T.MapLOfStringL$FieldValueL = dart.constFn(dart.legacy(T.MapOfStringL$FieldValueL())))(),
    IdentityMapOfStringL$MapLOfStringL$FieldValueL: () => (T.IdentityMapOfStringL$MapLOfStringL$FieldValueL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.MapLOfStringL$FieldValueL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = ["package:ticketapp/repositories/ticket_repository.dart"];
  ticket_repository.TicketRepository = class TicketRepository extends core.Object {
    static get instance() {
      if (ticket_repository.TicketRepository._instance == null) {
        ticket_repository.TicketRepository._instance = new ticket_repository.TicketRepository.__();
      }
      return ticket_repository.TicketRepository._instance;
    }
    dispose() {
      ticket_repository.TicketRepository._instance = null;
    }
    loadDiscount(event, code) {
      return async.async(T.DiscountL(), function* loadDiscount() {
        let discountSnapshot = (yield cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(event.docID).collection("discounts").where("code", {isEqualTo: code}).get());
        if (discountSnapshot.size === 0) {
          return null;
        } else {
          return discount.Discount.fromMap(discountSnapshot.docs[$_get](0).id, discountSnapshot.docs[$_get](0).data());
        }
      });
    }
    loadTickets(uid, event) {
      return async.async(T.ListLOfTicketL(), function* loadTickets() {
        let tickets = T.JSArrayOfTicketL().of([]);
        let ticketSnapshot = (yield cloud_firestore.FirebaseFirestore.instance.collection("users").doc(uid).collection("tickets").where("eventref", {isEqualTo: event.docID}).get());
        core.print("num tickets " + dart.str(ticketSnapshot.size));
        if (ticketSnapshot.size === 0) {
          return T.JSArrayOfTicketL().of([]);
        } else {
          ticketSnapshot.docs[$forEach](dart.fn(ticketDoc => {
            let t0;
            let ticket = null;
            try {
              ticket = (t0 = new ticket$.Ticket.new(), (() => {
                t0.event = event;
                t0.docId = ticketDoc.id;
                t0.dateIssued = new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dload(ticketDoc.data()[$_get]("requesttime"), 'millisecondsSinceEpoch')));
                return t0;
              })());
              try {
                core.print("option 1");
                ticket.release = event.getRelease(T.StringL().as(ticketDoc.data()[$_get]("ticket_release_id")));
                tickets[$add](ticket);
              } catch (e$) {
                let _ = dart.getThrown(e$);
                if (ticket.release == null) {
                  core.print("get single release");
                  ticket.release = event.getReleasesWithSingleTicketRestriction()[$_get](0);
                }
                tickets[$add](ticket);
              }
            } catch (e$0) {
              let e = dart.getThrown(e$0);
              let s = dart.stackTrace(e$0);
              bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s, {severity: bugsnag_wrapper.ErrorSeverity.error});
              core.print(e);
            }
          }, T.QueryDocumentSnapshotLToNull()));
          return tickets;
        }
      });
    }
    issueTickets(linkType, release, quantity, discount) {
      return async.async(T.ListLOfTicketL(), (function* issueTickets() {
        let t2;
        try {
          let ticketDocIds = T.JSArrayOfStringL().of([]);
          let tickets = T.JSArrayOfTicketL().of([]);
          for (let i = 0; i < dart.notNull(quantity); i = i + 1) {
            let ticket = (t2 = new ticket$.Ticket.new(), (() => {
              t2.dateIssued = new core.DateTime.now();
              t2.event = linkType.event;
              return t2;
            })());
            let ticketDoc = (yield cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(linkType.event.docID).collection("tickets").add((() => {
              let t2 = new (T.IdentityMapOfStringL$dynamic()).new();
              t2[$_set]("eventref", linkType.event.docID);
              t2[$_set]("venueref", linkType.event.venue);
              t2[$_set]("eventdate", linkType.event.date);
              t2[$_set]("eventname", linkType.event.name);
              t2[$_set]("imageURL", linkType.event.coverImageURL);
              t2[$_set]("type", dart.toString(linkType));
              t2[$_set]("ticketnumber", i);
              t2[$_set]("valid", true);
              t2[$_set]("requestee", user_repository.UserRepository.instance.currentUser.firebaseUserID);
              t2[$_set]("requesttime", ticket.dateIssued);
              t2[$_set]("useremail", user_repository.UserRepository.instance.currentUser.email);
              t2[$_set]("firstname", user_repository.UserRepository.instance.currentUser.firstname);
              t2[$_set]("lastname", user_repository.UserRepository.instance.currentUser.lastname);
              t2[$_set]("dob", user_repository.UserRepository.instance.currentUser.dob);
              t2[$_set]("gender", user['GenderExtension|toDBString'](user_repository.UserRepository.instance.currentUser.gender));
              if (T.InvitationL().is(linkType)) t2[$_set]("promoter", linkType.promoter.docId);
              if (T.AdvertisementInviteL().is(linkType)) t2[$_set]("advertisement_id", linkType.advertisementId);
              if (discount != null) t2[$_set]("discount_id", discount.docId);
              t2[$_set]("onWaitList", false);
              t2[$_set]("venuename", linkType.event.venueName);
              t2[$_set]("ticket_release_id", release.docId);
              return t2;
            })()));
            cloud_firestore.FirebaseFirestore.instance.collection("users").doc(user_repository.UserRepository.instance.currentUser.firebaseUserID).collection("tickets").doc(ticketDoc.id).set((() => {
              let t3 = new (T.IdentityMapOfStringL$dynamic()).new();
              t3[$_set]("eventref", linkType.event.docID);
              t3[$_set]("eventdate", linkType.event.date);
              t3[$_set]("eventname", linkType.event.name);
              t3[$_set]("imageURL", linkType.event.coverImageURL);
              t3[$_set]("type", dart.toString(linkType));
              t3[$_set]("ticketnumber", i);
              t3[$_set]("valid", true);
              t3[$_set]("requesttime", ticket.dateIssued);
              if (T.InvitationL().is(linkType)) t3[$_set]("promoter", linkType.promoter.docId);
              if (T.AdvertisementInviteL().is(linkType)) t3[$_set]("advertisement_id", linkType.advertisementId);
              t3[$_set]("onWaitList", false);
              t3[$_set]("venuename", linkType.event.venueName);
              t3[$_set]("ticket_release_id", release.docId);
              return t3;
            })());
            ticketDocIds[$add](ticketDoc.id);
            ticket.docId = ticketDoc.id;
            ticket.release = release;
            tickets[$add](ticket);
          }
          this.incrementLinkTicketsBoughtCounter(linkType, quantity);
          this.incrementTicketCounter(linkType.event, release, quantity);
          if (discount != null) {
            this.incrementDiscountCounter(linkType.event, discount, quantity);
          }
          let response = null;
          try {
            response = (yield http.post("https://appollo-devops.web.app/ticketConfirmation", {body: new (T.IdentityMapOfStringL$StringL()).from(["uid", user_repository.UserRepository.instance.currentUser.firebaseUserID, "eventId", linkType.event.docID, "ticketId", ticketDocIds[$_get](0)])}));
            core.print(response.statusCode);
            core.print(response.body);
          } catch (e$) {
            let ex = dart.getThrown(e$);
            if (T.SocketExceptionL().is(ex)) {
              core.print(ex);
              bugsnag_wrapper.BugsnagNotifier.instance.notify(ex, core.StackTrace.empty, {severity: bugsnag_wrapper.ErrorSeverity.error});
            } else
              throw e$;
          }
          return tickets;
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s, {severity: bugsnag_wrapper.ErrorSeverity.error});
          core.print(e);
          return T.JSArrayOfTicketL().of([]);
        }
      }).bind(this));
    }
    acceptInvitation(linkType, release) {
      return async.async(dart.dynamic, (function* acceptInvitation() {
        let t6;
        try {
          let ticket = (t6 = new ticket$.Ticket.new(), (() => {
            t6.dateIssued = new core.DateTime.now();
            t6.event = linkType.event;
            return t6;
          })());
          let ticketDoc = (yield cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(linkType.event.docID).collection("tickets").add((() => {
            let t6 = new (T.IdentityMapOfStringL$dynamic()).new();
            t6[$_set]("eventref", linkType.event.docID);
            t6[$_set]("venueref", linkType.event.venue);
            t6[$_set]("eventdate", linkType.event.date);
            t6[$_set]("eventname", linkType.event.name);
            t6[$_set]("imageURL", linkType.event.coverImageURL);
            t6[$_set]("type", dart.toString(linkType));
            t6[$_set]("valid", true);
            t6[$_set]("requestee", user_repository.UserRepository.instance.currentUser.firebaseUserID);
            t6[$_set]("requesttime", ticket.dateIssued);
            t6[$_set]("useremail", user_repository.UserRepository.instance.currentUser.email);
            t6[$_set]("firstname", user_repository.UserRepository.instance.currentUser.firstname);
            t6[$_set]("lastname", user_repository.UserRepository.instance.currentUser.lastname);
            t6[$_set]("dob", user_repository.UserRepository.instance.currentUser.dob);
            t6[$_set]("gender", user['GenderExtension|toDBString'](user_repository.UserRepository.instance.currentUser.gender));
            if (T.InvitationL().is(linkType)) t6[$_set]("promoter", linkType.promoter.docId);
            if (T.AdvertisementInviteL().is(linkType)) t6[$_set]("advertisement_id", linkType.advertisementId);
            t6[$_set]("onWaitList", false);
            t6[$_set]("venuename", linkType.event.venueName);
            t6[$_set]("ticket_release_id", release.docId);
            return t6;
          })()));
          yield cloud_firestore.FirebaseFirestore.instance.collection("users").doc(user_repository.UserRepository.instance.currentUser.firebaseUserID).collection("tickets").doc(ticketDoc.id).set((() => {
            let t7 = new (T.IdentityMapOfStringL$dynamic()).new();
            t7[$_set]("eventref", linkType.event.docID);
            t7[$_set]("eventdate", linkType.event.date);
            t7[$_set]("eventname", linkType.event.name);
            t7[$_set]("imageURL", linkType.event.coverImageURL);
            t7[$_set]("type", dart.toString(linkType));
            t7[$_set]("valid", true);
            t7[$_set]("requesttime", ticket.dateIssued);
            if (T.InvitationL().is(linkType)) t7[$_set]("promoter", linkType.promoter.docId);
            if (T.AdvertisementInviteL().is(linkType)) t7[$_set]("advertisement_id", linkType.advertisementId);
            t7[$_set]("onWaitList", false);
            t7[$_set]("venuename", linkType.event.venueName);
            t7[$_set]("ticket_release_id", release.docId);
            return t7;
          })());
          this.incrementLinkAcceptedCounter(linkType);
          this.incrementTicketCounter(linkType.event, release, 1);
          let response = null;
          try {
            response = (yield http.post("https://appollo-devops.web.app/ticketConfirmation", {body: new (T.IdentityMapOfStringL$StringL()).from(["uid", user_repository.UserRepository.instance.currentUser.firebaseUserID, "eventId", linkType.event.docID, "ticketId", ticketDoc.id])}));
            core.print(response.statusCode);
            core.print(response.body);
          } catch (e$) {
            let ex = dart.getThrown(e$);
            if (T.SocketExceptionL().is(ex)) {
              core.print(ex);
              bugsnag_wrapper.BugsnagNotifier.instance.notify(ex, core.StackTrace.empty, {severity: bugsnag_wrapper.ErrorSeverity.error});
            } else
              throw e$;
          }
          ticket.docId = ticketDoc.id;
          ticket.release = release;
          return ticket;
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          bugsnag_wrapper.BugsnagNotifier.instance.notify("acceptInvitation\n" + dart.notNull(T.StringL().as(e)), s, {severity: bugsnag_wrapper.ErrorSeverity.error});
          core.print(e);
          return null;
        }
      }).bind(this));
    }
    incrementTicketCounter(event, release, quantity) {
      return async.async(dart.void, function* incrementTicketCounter() {
        let releaseSnapshot = (yield cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(event.docID).collection("release_managers").doc(event.releaseManagers[$firstWhere](dart.fn(element => element.releases[$contains](release), T.ReleaseManagerLToboolL())).docId).collection("ticket_releases").doc(release.docId).get());
        if (dart.test(releaseSnapshot.exists)) {
          releaseSnapshot.reference.set(new (T.IdentityMapOfStringL$dynamic()).from(["tickets_bought", cloud_firestore.FieldValue.increment(quantity)]), new set_options.SetOptions.new({merge: true}));
        }
      });
    }
    incrementDiscountCounter(event, discount, quantity) {
      return async.async(dart.void, function* incrementDiscountCounter() {
        let releaseSnapshot = (yield cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(event.docID).collection("discounts").doc(discount.docId).get());
        if (dart.test(releaseSnapshot.exists)) {
          releaseSnapshot.reference.set(new (T.IdentityMapOfStringL$dynamic()).from(["times_used", cloud_firestore.FieldValue.increment(quantity)]), new set_options.SetOptions.new({merge: true}));
        }
      });
    }
    incrementLinkOpenedCounter(linkType) {
      return async.async(dart.dynamic, function* incrementLinkOpenedCounter() {
        try {
          if (T.PromoterInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("promoters").doc(linkType.promoter.docId).set(new (T.IdentityMapOfStringL$dynamic()).from(["events", new (T.IdentityMapOfStringL$MapLOfStringL$FieldValueL()).from([linkType.event.docID, new (T.IdentityMapOfStringL$FieldValueL()).from(["linkOpened", cloud_firestore.FieldValue.increment(1)])])]), new set_options.SetOptions.new({merge: true}));
          } else if (T.AdvertisementInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(linkType.event.docID).collection("advertisement_links").doc(linkType.advertisementId).set(new (T.IdentityMapOfStringL$dynamic()).from(["visits", cloud_firestore.FieldValue.increment(1)]), new set_options.SetOptions.new({merge: true}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          core.print(e);
          bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s, {severity: bugsnag_wrapper.ErrorSeverity.error});
        }
      });
    }
    incrementLinkAcceptedCounter(linkType) {
      return async.async(dart.dynamic, function* incrementLinkAcceptedCounter() {
        try {
          if (T.PromoterInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("promoters").doc(linkType.promoter.docId).set(new (T.IdentityMapOfStringL$dynamic()).from(["events", new (T.IdentityMapOfStringL$MapLOfStringL$FieldValueL()).from([linkType.event.docID, new (T.IdentityMapOfStringL$FieldValueL()).from(["acceptedInvites", cloud_firestore.FieldValue.increment(1)])])]), new set_options.SetOptions.new({merge: true}));
          } else if (T.AdvertisementInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(linkType.event.docID).collection("advertisement_links").doc(linkType.advertisementId).set(new (T.IdentityMapOfStringL$dynamic()).from(["completed", cloud_firestore.FieldValue.increment(1)]), new set_options.SetOptions.new({merge: true}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          core.print(e);
          bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s, {severity: bugsnag_wrapper.ErrorSeverity.error});
        }
      });
    }
    incrementLinkTicketsBoughtCounter(linkType, quantity) {
      return async.async(dart.dynamic, function* incrementLinkTicketsBoughtCounter() {
        try {
          if (T.PromoterInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("promoters").doc(linkType.promoter.docId).set(new (T.IdentityMapOfStringL$dynamic()).from(["events", new (T.IdentityMapOfStringL$MapLOfStringL$FieldValueL()).from([linkType.event.docID, new (T.IdentityMapOfStringL$FieldValueL()).from(["soldTickets", cloud_firestore.FieldValue.increment(quantity)])])]), new set_options.SetOptions.new({merge: true}));
          } else if (T.AdvertisementInviteL().is(linkType)) {
            cloud_firestore.FirebaseFirestore.instance.collection("ticketevents").doc(linkType.event.docID).collection("advertisement_links").doc(linkType.advertisementId).set(new (T.IdentityMapOfStringL$dynamic()).from(["completed", cloud_firestore.FieldValue.increment(1), "soldTickets", cloud_firestore.FieldValue.increment(quantity)]), new set_options.SetOptions.new({merge: true}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          core.print(e);
          bugsnag_wrapper.BugsnagNotifier.instance.notify(e, s, {severity: bugsnag_wrapper.ErrorSeverity.error});
        }
      });
    }
  };
  (ticket_repository.TicketRepository.__ = function() {
    ;
  }).prototype = ticket_repository.TicketRepository.prototype;
  dart.addTypeTests(ticket_repository.TicketRepository);
  dart.addTypeCaches(ticket_repository.TicketRepository);
  dart.setMethodSignature(ticket_repository.TicketRepository, () => ({
    __proto__: dart.getMethods(ticket_repository.TicketRepository.__proto__),
    dispose: dart.fnType(dart.dynamic, []),
    loadDiscount: dart.fnType(dart.legacy(async.Future$(dart.legacy(discount.Discount))), [dart.legacy(event.Event), dart.legacy(core.String)]),
    loadTickets: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(ticket$.Ticket))))), [dart.legacy(core.String), dart.legacy(event.Event)]),
    issueTickets: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(ticket$.Ticket))))), [dart.legacy(link_type.LinkType), dart.legacy(ticket_release.TicketRelease), dart.legacy(core.int), dart.legacy(discount.Discount)]),
    acceptInvitation: dart.fnType(dart.dynamic, [dart.legacy(link_type.LinkType), dart.legacy(ticket_release.TicketRelease)]),
    incrementTicketCounter: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(event.Event), dart.legacy(ticket_release.TicketRelease), dart.legacy(core.int)]),
    incrementDiscountCounter: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(event.Event), dart.legacy(discount.Discount), dart.legacy(core.int)]),
    incrementLinkOpenedCounter: dart.fnType(dart.dynamic, [dart.legacy(link_type.LinkType)]),
    incrementLinkAcceptedCounter: dart.fnType(dart.dynamic, [dart.legacy(link_type.LinkType)]),
    incrementLinkTicketsBoughtCounter: dart.fnType(dart.dynamic, [dart.legacy(link_type.LinkType), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(ticket_repository.TicketRepository, I[0]);
  dart.defineLazy(ticket_repository.TicketRepository, {
    /*ticket_repository.TicketRepository._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  dart.trackLibraries("packages/ticketapp/repositories/ticket_repository.dart", {
    "package:ticketapp/repositories/ticket_repository.dart": ticket_repository
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["ticket_repository.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/ticketapp/repositories/ticket_repository.dart.lib.js"}');
  // Exports:
  return {
    repositories__ticket_repository: ticket_repository
  };
}));

//# sourceMappingURL=ticket_repository.dart.lib.js.map
