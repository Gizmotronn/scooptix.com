define(['dart_sdk', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/scheduler/priority.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/widgets/widget_span.dart'], (function load__packages__visibility_detector__src__visibility_detector_controller_dart(dart_sdk, packages__flutter__src__foundation__key$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__scheduler__priority$46dart, packages__flutter__src__foundation__debug$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__widgets__widget_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const binding = packages__flutter__src__rendering__layer$46dart.src__rendering__binding;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const binding$ = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const priority = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  var visibility_detector_controller = Object.create(dart.library);
  var visibility_detector_layer = Object.create(dart.library);
  var render_visibility_detector = Object.create(dart.library);
  var visibility_detector = Object.create(dart.library);
  var $_get = dartx._get;
  var $isEmpty = dartx.isEmpty;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $reversed = dartx.reversed;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $skip = dartx.skip;
  var $abs = dartx.abs;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ClipRectLayerL: () => (T.ClipRectLayerL = dart.constFn(dart.legacy(layer.ClipRectLayer)))(),
    ClipRRectLayerL: () => (T.ClipRRectLayerL = dart.constFn(dart.legacy(layer.ClipRRectLayer)))(),
    ClipPathLayerL: () => (T.ClipPathLayerL = dart.constFn(dart.legacy(layer.ClipPathLayer)))(),
    DurationL: () => (T.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    DurationLToNull: () => (T.DurationLToNull = dart.constFn(dart.fnType(core.Null, [T.DurationL()])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    KeyL: () => (T.KeyL = dart.constFn(dart.legacy(key.Key)))(),
    DiagnosticsPropertyOfKeyL: () => (T.DiagnosticsPropertyOfKeyL = dart.constFn(diagnostics.DiagnosticsProperty$(T.KeyL())))(),
    RectL: () => (T.RectL = dart.constFn(dart.legacy(ui.Rect)))(),
    DiagnosticsPropertyOfRectL: () => (T.DiagnosticsPropertyOfRectL = dart.constFn(diagnostics.DiagnosticsProperty$(T.RectL())))(),
    VisibilityDetectorLayerL: () => (T.VisibilityDetectorLayerL = dart.constFn(dart.legacy(visibility_detector_layer.VisibilityDetectorLayer)))(),
    LinkedMapOfKeyL$VisibilityDetectorLayerL: () => (T.LinkedMapOfKeyL$VisibilityDetectorLayerL = dart.constFn(_js_helper.LinkedMap$(T.KeyL(), T.VisibilityDetectorLayerL())))(),
    VisibilityInfoL: () => (T.VisibilityInfoL = dart.constFn(dart.legacy(visibility_detector.VisibilityInfo)))(),
    LinkedMapOfKeyL$VisibilityInfoL: () => (T.LinkedMapOfKeyL$VisibilityInfoL = dart.constFn(_js_helper.LinkedMap$(T.KeyL(), T.VisibilityInfoL())))(),
    LinkedMapOfKeyL$RectL: () => (T.LinkedMapOfKeyL$RectL = dart.constFn(_js_helper.LinkedMap$(T.KeyL(), T.RectL())))(),
    LayerL: () => (T.LayerL = dart.constFn(dart.legacy(layer.Layer)))(),
    JSArrayOfLayerL: () => (T.JSArrayOfLayerL = dart.constFn(_interceptors.JSArray$(T.LayerL())))(),
    ContainerLayerL: () => (T.ContainerLayerL = dart.constFn(dart.legacy(layer.ContainerLayer)))(),
    TransformLayerL: () => (T.TransformLayerL = dart.constFn(dart.legacy(layer.TransformLayer)))(),
    RenderVisibilityDetectorL: () => (T.RenderVisibilityDetectorL = dart.constFn(dart.legacy(render_visibility_detector.RenderVisibilityDetector)))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C1() {
      return C[1] = dart.fn(visibility_detector_layer.VisibilityDetectorLayer._handleTimer, T.VoidTovoid());
    },
    get C2() {
      return C[2] = dart.fn(visibility_detector_layer.VisibilityDetectorLayer._processCallbacks, T.VoidTovoid());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:visibility_detector/src/visibility_detector_controller.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/visibility_detector-0.1.5/lib/src/visibility_detector_layer.dart",
    "package:visibility_detector/src/visibility_detector_layer.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/visibility_detector-0.1.5/lib/src/render_visibility_detector.dart",
    "package:visibility_detector/src/render_visibility_detector.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/visibility_detector-0.1.5/lib/src/visibility_detector.dart",
    "package:visibility_detector/src/visibility_detector.dart"
  ];
  var updateInterval = dart.privateName(visibility_detector_controller, "VisibilityDetectorController.updateInterval");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  visibility_detector_controller.VisibilityDetectorController = class VisibilityDetectorController extends core.Object {
    get updateInterval() {
      return this[updateInterval];
    }
    set updateInterval(value) {
      this[updateInterval] = value;
    }
    static get instance() {
      return visibility_detector_controller.VisibilityDetectorController._instance;
    }
    notifyNow() {
      return visibility_detector_layer.VisibilityDetectorLayer.notifyNow();
    }
    forget(key) {
      return visibility_detector_layer.VisibilityDetectorLayer.forget(key);
    }
    widgetBoundsFor(key) {
      return visibility_detector_layer.VisibilityDetectorLayer.widgetBounds[$_get](key);
    }
  };
  (visibility_detector_controller.VisibilityDetectorController.new = function() {
    this[updateInterval] = C[0] || CT.C0;
    ;
  }).prototype = visibility_detector_controller.VisibilityDetectorController.prototype;
  dart.addTypeTests(visibility_detector_controller.VisibilityDetectorController);
  dart.addTypeCaches(visibility_detector_controller.VisibilityDetectorController);
  dart.setMethodSignature(visibility_detector_controller.VisibilityDetectorController, () => ({
    __proto__: dart.getMethods(visibility_detector_controller.VisibilityDetectorController.__proto__),
    notifyNow: dart.fnType(dart.void, []),
    forget: dart.fnType(dart.void, [dart.legacy(key.Key)]),
    widgetBoundsFor: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(key.Key)])
  }));
  dart.setLibraryUri(visibility_detector_controller.VisibilityDetectorController, I[0]);
  dart.setFieldSignature(visibility_detector_controller.VisibilityDetectorController, () => ({
    __proto__: dart.getFields(visibility_detector_controller.VisibilityDetectorController.__proto__),
    updateInterval: dart.fieldType(dart.legacy(core.Duration))
  }));
  dart.defineLazy(visibility_detector_controller.VisibilityDetectorController, {
    /*visibility_detector_controller.VisibilityDetectorController._instance*/get _instance() {
      return new visibility_detector_controller.VisibilityDetectorController.new();
    }
  }, true);
  var key$ = dart.privateName(visibility_detector_layer, "VisibilityDetectorLayer.key");
  var widgetSize$ = dart.privateName(visibility_detector_layer, "VisibilityDetectorLayer.widgetSize");
  var paintOffset$ = dart.privateName(visibility_detector_layer, "VisibilityDetectorLayer.paintOffset");
  var onVisibilityChanged$ = dart.privateName(visibility_detector_layer, "VisibilityDetectorLayer.onVisibilityChanged");
  var _layerOffset = dart.privateName(visibility_detector_layer, "_layerOffset");
  var _computeWidgetBounds = dart.privateName(visibility_detector_layer, "_computeWidgetBounds");
  var _computeClipRect = dart.privateName(visibility_detector_layer, "_computeClipRect");
  var _scheduleUpdate = dart.privateName(visibility_detector_layer, "_scheduleUpdate");
  var _fireCallback = dart.privateName(visibility_detector_layer, "_fireCallback");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  visibility_detector_layer.VisibilityDetectorLayer = class VisibilityDetectorLayer extends layer.ContainerLayer {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get widgetSize() {
      return this[widgetSize$];
    }
    set widgetSize(value) {
      super.widgetSize = value;
    }
    get paintOffset() {
      return this[paintOffset$];
    }
    set paintOffset(value) {
      super.paintOffset = value;
    }
    get onVisibilityChanged() {
      return this[onVisibilityChanged$];
    }
    set onVisibilityChanged(value) {
      super.onVisibilityChanged = value;
    }
    static get widgetBounds() {
      return visibility_detector_layer.VisibilityDetectorLayer._lastBounds;
    }
    [_computeWidgetBounds]() {
      let r = visibility_detector_layer._localRectToGlobal(this, ui.Offset.zero['&'](this.widgetSize));
      return r.shift(this.paintOffset['+'](this[_layerOffset]));
    }
    [_computeClipRect]() {
      let t0;
      if (!((t0 = binding.RendererBinding.instance, t0 == null ? null : t0.renderView) != null)) dart.assertFailed(null, I[1], 131, 12, "RendererBinding.instance?.renderView != null");
      let clipRect = ui.Offset.zero['&'](binding.RendererBinding.instance.renderView.size);
      let parentLayer = this.parent;
      while (parentLayer != null) {
        let curClipRect = null;
        if (T.ClipRectLayerL().is(parentLayer)) {
          curClipRect = parentLayer.clipRect;
        } else if (T.ClipRRectLayerL().is(parentLayer)) {
          curClipRect = parentLayer.clipRRect.outerRect;
        } else if (T.ClipPathLayerL().is(parentLayer)) {
          curClipRect = parentLayer.clipPath.getBounds();
        }
        if (curClipRect != null) {
          curClipRect = visibility_detector_layer._localRectToGlobal(parentLayer, curClipRect);
          clipRect = clipRect.intersect(curClipRect);
        }
        parentLayer = parentLayer.parent;
      }
      return clipRect;
    }
    [_scheduleUpdate]() {
      let isFirstUpdate = visibility_detector_layer.VisibilityDetectorLayer._updated[$isEmpty];
      visibility_detector_layer.VisibilityDetectorLayer._updated[$_set](this.key, this);
      let updateInterval = visibility_detector_controller.VisibilityDetectorController.instance.updateInterval;
      if (dart.equals(updateInterval, core.Duration.zero)) {
        if (dart.test(isFirstUpdate)) {
          binding$.SchedulerBinding.instance.addPostFrameCallback(dart.fn(timeStamp => {
            visibility_detector_layer.VisibilityDetectorLayer._processCallbacks();
          }, T.DurationLToNull()));
        }
      } else if (visibility_detector_layer.VisibilityDetectorLayer._timer == null) {
        visibility_detector_layer.VisibilityDetectorLayer._timer = async.Timer.new(updateInterval, C[1] || CT.C1);
      } else {
        if (!dart.test(visibility_detector_layer.VisibilityDetectorLayer._timer.isActive)) dart.assertFailed(null, I[1], 184, 14, "_timer.isActive");
      }
    }
    static _handleTimer() {
      visibility_detector_layer.VisibilityDetectorLayer._timer = null;
      binding$.SchedulerBinding.instance.scheduleTask(dart.void, C[2] || CT.C2, priority.Priority.touch);
    }
    static notifyNow() {
      let t0;
      t0 = visibility_detector_layer.VisibilityDetectorLayer._timer;
      t0 == null ? null : t0.cancel();
      visibility_detector_layer.VisibilityDetectorLayer._timer = null;
      visibility_detector_layer.VisibilityDetectorLayer._processCallbacks();
    }
    static forget(key) {
      let t0;
      visibility_detector_layer.VisibilityDetectorLayer._updated[$remove](key);
      visibility_detector_layer.VisibilityDetectorLayer._lastVisibility[$remove](key);
      visibility_detector_layer.VisibilityDetectorLayer._lastBounds[$remove](key);
      if (dart.test(visibility_detector_layer.VisibilityDetectorLayer._updated[$isEmpty])) {
        t0 = visibility_detector_layer.VisibilityDetectorLayer._timer;
        t0 == null ? null : t0.cancel();
        visibility_detector_layer.VisibilityDetectorLayer._timer = null;
      }
    }
    static _processCallbacks() {
      let t0;
      for (let layer of visibility_detector_layer.VisibilityDetectorLayer._updated[$values]) {
        if (!dart.test(layer.attached)) {
          layer[_fireCallback](new visibility_detector.VisibilityInfo.new({key: layer.key, size: (t0 = visibility_detector_layer.VisibilityDetectorLayer._lastVisibility[$_get](layer.key), t0 == null ? null : t0.size)}));
          continue;
        }
        let widgetBounds = layer[_computeWidgetBounds]();
        visibility_detector_layer.VisibilityDetectorLayer._lastBounds[$_set](layer.key, widgetBounds);
        let info = visibility_detector.VisibilityInfo.fromRects({key: layer.key, widgetBounds: widgetBounds, clipRect: layer[_computeClipRect]()});
        layer[_fireCallback](info);
      }
      visibility_detector_layer.VisibilityDetectorLayer._updated[$clear]();
    }
    [_fireCallback](info) {
      let t0;
      if (!(info != null)) dart.assertFailed(null, I[1], 247, 12, "info != null");
      let oldInfo = visibility_detector_layer.VisibilityDetectorLayer._lastVisibility[$_get](this.key);
      let visible = !dart.test(info.visibleBounds.isEmpty);
      if (oldInfo == null) {
        if (!visible) {
          return;
        }
      } else if (dart.test(info.matchesVisibility(oldInfo))) {
        return;
      }
      if (visible) {
        visibility_detector_layer.VisibilityDetectorLayer._lastVisibility[$_set](this.key, info);
      } else {
        visibility_detector_layer.VisibilityDetectorLayer._lastVisibility[$remove](this.key);
        visibility_detector_layer.VisibilityDetectorLayer._lastBounds[$remove](this.key);
      }
      t0 = info;
      this.onVisibilityChanged(t0);
    }
    addToScene(builder, layerOffset = C[3] || CT.C3) {
      this[_layerOffset] = layerOffset;
      this[_scheduleUpdate]();
      super.addToScene(builder, layerOffset);
    }
    attach(owner) {
      super.attach(owner);
      this[_scheduleUpdate]();
    }
    detach() {
      super.detach();
      this[_scheduleUpdate]();
    }
    debugFillProperties(properties) {
      let t0;
      super.debugFillProperties(properties);
      t0 = properties;
      (() => {
        t0.add(new (T.DiagnosticsPropertyOfKeyL()).new("key", this.key));
        t0.add(new (T.DiagnosticsPropertyOfRectL()).new("widgetRect", this[_computeWidgetBounds]()));
        t0.add(new (T.DiagnosticsPropertyOfRectL()).new("clipRect", this[_computeClipRect]()));
        return t0;
      })();
    }
  };
  (visibility_detector_layer.VisibilityDetectorLayer.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let widgetSize = opts && 'widgetSize' in opts ? opts.widgetSize : null;
    let paintOffset = opts && 'paintOffset' in opts ? opts.paintOffset : null;
    let onVisibilityChanged = opts && 'onVisibilityChanged' in opts ? opts.onVisibilityChanged : null;
    this[key$] = key;
    this[widgetSize$] = widgetSize;
    this[paintOffset$] = paintOffset;
    this[onVisibilityChanged$] = onVisibilityChanged;
    if (!(key != null)) dart.assertFailed(null, I[1], 68, 16, "key != null");
    if (!(paintOffset != null)) dart.assertFailed(null, I[1], 69, 16, "paintOffset != null");
    if (!(widgetSize != null)) dart.assertFailed(null, I[1], 70, 16, "widgetSize != null");
    if (!(onVisibilityChanged != null)) dart.assertFailed(null, I[1], 71, 16, "onVisibilityChanged != null");
    this[_layerOffset] = ui.Offset.zero;
    visibility_detector_layer.VisibilityDetectorLayer.__proto__.new.call(this);
    ;
  }).prototype = visibility_detector_layer.VisibilityDetectorLayer.prototype;
  dart.addTypeTests(visibility_detector_layer.VisibilityDetectorLayer);
  dart.addTypeCaches(visibility_detector_layer.VisibilityDetectorLayer);
  dart.setMethodSignature(visibility_detector_layer.VisibilityDetectorLayer, () => ({
    __proto__: dart.getMethods(visibility_detector_layer.VisibilityDetectorLayer.__proto__),
    [_computeWidgetBounds]: dart.fnType(dart.legacy(ui.Rect), []),
    [_computeClipRect]: dart.fnType(dart.legacy(ui.Rect), []),
    [_scheduleUpdate]: dart.fnType(dart.void, []),
    [_fireCallback]: dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)]),
    addToScene: dart.fnType(dart.void, [dart.legacy(ui.SceneBuilder)], [dart.legacy(ui.Offset)]),
    attach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(visibility_detector_layer.VisibilityDetectorLayer, I[2]);
  dart.setFieldSignature(visibility_detector_layer.VisibilityDetectorLayer, () => ({
    __proto__: dart.getFields(visibility_detector_layer.VisibilityDetectorLayer.__proto__),
    key: dart.finalFieldType(dart.legacy(key.Key)),
    widgetSize: dart.finalFieldType(dart.legacy(ui.Size)),
    [_layerOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    paintOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
    onVisibilityChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)])))
  }));
  dart.defineLazy(visibility_detector_layer.VisibilityDetectorLayer, {
    /*visibility_detector_layer.VisibilityDetectorLayer._timer*/get _timer() {
      return null;
    },
    set _timer(_) {},
    /*visibility_detector_layer.VisibilityDetectorLayer._updated*/get _updated() {
      return new (T.LinkedMapOfKeyL$VisibilityDetectorLayerL()).new();
    },
    /*visibility_detector_layer.VisibilityDetectorLayer._lastVisibility*/get _lastVisibility() {
      return new (T.LinkedMapOfKeyL$VisibilityInfoL()).new();
    },
    /*visibility_detector_layer.VisibilityDetectorLayer._lastBounds*/get _lastBounds() {
      return new (T.LinkedMapOfKeyL$RectL()).new();
    }
  }, true);
  visibility_detector_layer._getLayerChain = function _getLayerChain(start) {
    let layerChain = T.JSArrayOfLayerL().of([]);
    for (let layer = start; layer != null; layer = layer.parent) {
      layerChain[$add](layer);
    }
    return layerChain[$reversed];
  };
  visibility_detector_layer._accumulateTransforms = function _accumulateTransforms(layerChain) {
    if (!(layerChain != null)) dart.assertFailed(null, I[1], 31, 10, "layerChain != null");
    let transform = vector_math_64.Matrix4.identity();
    if (dart.test(layerChain[$isNotEmpty])) {
      let parent = layerChain[$first];
      for (let child of layerChain[$skip](1)) {
        T.ContainerLayerL().as(parent).applyTransform(child, transform);
        parent = child;
      }
    }
    return transform;
  };
  visibility_detector_layer._localRectToGlobal = function _localRectToGlobal(layer, localRect) {
    let layerChain = visibility_detector_layer._getLayerChain(layer);
    if (!dart.test(layerChain[$isNotEmpty])) dart.assertFailed(null, I[1], 51, 10, "layerChain.isNotEmpty");
    if (!T.TransformLayerL().is(layerChain[$first])) dart.assertFailed(null, I[1], 52, 10, "layerChain.first is TransformLayer");
    let transform = visibility_detector_layer._accumulateTransforms(layerChain[$skip](1));
    return matrix_utils.MatrixUtils.transformRect(transform, localRect);
  };
  var key$0 = dart.privateName(render_visibility_detector, "RenderVisibilityDetector.key");
  var _onVisibilityChanged = dart.privateName(render_visibility_detector, "_onVisibilityChanged");
  render_visibility_detector.RenderVisibilityDetector = class RenderVisibilityDetector extends proxy_box.RenderProxyBox {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get onVisibilityChanged() {
      return this[_onVisibilityChanged];
    }
    set onVisibilityChanged(value) {
      this[_onVisibilityChanged] = value;
      this.markNeedsCompositingBitsUpdate();
      this.markNeedsPaint();
    }
    get alwaysNeedsCompositing() {
      return this.onVisibilityChanged != null;
    }
    paint(context, offset) {
      if (this.onVisibilityChanged == null) {
        visibility_detector_layer.VisibilityDetectorLayer.forget(this.key);
        super.paint(context, offset);
        return;
      }
      let layer = new visibility_detector_layer.VisibilityDetectorLayer.new({key: this.key, widgetSize: this.semanticBounds.size, paintOffset: offset, onVisibilityChanged: this.onVisibilityChanged});
      context.pushLayer(layer, dart.bind(this, 'paint', super.paint), offset);
    }
  };
  (render_visibility_detector.RenderVisibilityDetector.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let onVisibilityChanged = opts && 'onVisibilityChanged' in opts ? opts.onVisibilityChanged : null;
    this[key$0] = key;
    if (!(key != null)) dart.assertFailed(null, I[3], 23, 16, "key != null");
    this[_onVisibilityChanged] = onVisibilityChanged;
    render_visibility_detector.RenderVisibilityDetector.__proto__.new.call(this, child);
    ;
  }).prototype = render_visibility_detector.RenderVisibilityDetector.prototype;
  dart.addTypeTests(render_visibility_detector.RenderVisibilityDetector);
  dart.addTypeCaches(render_visibility_detector.RenderVisibilityDetector);
  dart.setMethodSignature(render_visibility_detector.RenderVisibilityDetector, () => ({
    __proto__: dart.getMethods(render_visibility_detector.RenderVisibilityDetector.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)])
  }));
  dart.setGetterSignature(render_visibility_detector.RenderVisibilityDetector, () => ({
    __proto__: dart.getGetters(render_visibility_detector.RenderVisibilityDetector.__proto__),
    onVisibilityChanged: dart.legacy(dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)])),
    alwaysNeedsCompositing: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(render_visibility_detector.RenderVisibilityDetector, () => ({
    __proto__: dart.getSetters(render_visibility_detector.RenderVisibilityDetector.__proto__),
    onVisibilityChanged: dart.legacy(dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)]))
  }));
  dart.setLibraryUri(render_visibility_detector.RenderVisibilityDetector, I[4]);
  dart.setFieldSignature(render_visibility_detector.RenderVisibilityDetector, () => ({
    __proto__: dart.getFields(render_visibility_detector.RenderVisibilityDetector.__proto__),
    key: dart.finalFieldType(dart.legacy(key.Key)),
    [_onVisibilityChanged]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)])))
  }));
  var onVisibilityChanged$0 = dart.privateName(visibility_detector, "VisibilityDetector.onVisibilityChanged");
  visibility_detector.VisibilityDetector = class VisibilityDetector extends framework.SingleChildRenderObjectWidget {
    get onVisibilityChanged() {
      return this[onVisibilityChanged$0];
    }
    set onVisibilityChanged(value) {
      super.onVisibilityChanged = value;
    }
    createRenderObject(context) {
      return new render_visibility_detector.RenderVisibilityDetector.new({key: this.key, onVisibilityChanged: this.onVisibilityChanged});
    }
    updateRenderObject(context, renderObject) {
      T.RenderVisibilityDetectorL().as(renderObject);
      if (!dart.equals(renderObject.key, this.key)) dart.assertFailed(null, I[5], 57, 12, "renderObject.key == key");
      renderObject.onVisibilityChanged = this.onVisibilityChanged;
    }
  };
  (visibility_detector.VisibilityDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let onVisibilityChanged = opts && 'onVisibilityChanged' in opts ? opts.onVisibilityChanged : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[onVisibilityChanged$0] = onVisibilityChanged;
    if (!(key != null)) dart.assertFailed(null, I[5], 37, 16, "key != null");
    if (!(child != null)) dart.assertFailed(null, I[5], 38, 16, "child != null");
    visibility_detector.VisibilityDetector.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = visibility_detector.VisibilityDetector.prototype;
  dart.addTypeTests(visibility_detector.VisibilityDetector);
  dart.addTypeCaches(visibility_detector.VisibilityDetector);
  dart.setMethodSignature(visibility_detector.VisibilityDetector, () => ({
    __proto__: dart.getMethods(visibility_detector.VisibilityDetector.__proto__),
    createRenderObject: dart.fnType(dart.legacy(render_visibility_detector.RenderVisibilityDetector), [dart.legacy(framework.BuildContext)]),
    updateRenderObject: dart.fnType(dart.void, [dart.legacy(framework.BuildContext), dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(visibility_detector.VisibilityDetector, I[6]);
  dart.setFieldSignature(visibility_detector.VisibilityDetector, () => ({
    __proto__: dart.getFields(visibility_detector.VisibilityDetector.__proto__),
    onVisibilityChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(visibility_detector.VisibilityInfo)])))
  }));
  var key$1 = dart.privateName(visibility_detector, "VisibilityInfo.key");
  var size$ = dart.privateName(visibility_detector, "VisibilityInfo.size");
  var visibleBounds$ = dart.privateName(visibility_detector, "VisibilityInfo.visibleBounds");
  visibility_detector.VisibilityInfo = class VisibilityInfo extends core.Object {
    get key() {
      return this[key$1];
    }
    set key(value) {
      super.key = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get visibleBounds() {
      return this[visibleBounds$];
    }
    set visibleBounds(value) {
      super.visibleBounds = value;
    }
    static fromRects(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let widgetBounds = opts && 'widgetBounds' in opts ? opts.widgetBounds : null;
      let clipRect = opts && 'clipRect' in opts ? opts.clipRect : null;
      if (!(widgetBounds != null)) dart.assertFailed(null, I[5], 90, 12, "widgetBounds != null");
      if (!(clipRect != null)) dart.assertFailed(null, I[5], 91, 12, "clipRect != null");
      let visibleBounds = dart.test(widgetBounds.overlaps(clipRect)) ? widgetBounds.intersect(clipRect).shift(widgetBounds.topLeft._negate()) : ui.Rect.zero;
      return new visibility_detector.VisibilityInfo.new({key: key, size: widgetBounds.size, visibleBounds: visibleBounds});
    }
    get visibleFraction() {
      let visibleArea = visibility_detector._area(this.visibleBounds.size);
      let maxVisibleArea = visibility_detector._area(this.size);
      if (dart.test(visibility_detector._floatNear(maxVisibleArea, 0.0))) {
        return 0.0;
      }
      let visibleFraction = dart.notNull(visibleArea) / dart.notNull(maxVisibleArea);
      if (dart.test(visibility_detector._floatNear(visibleFraction, 0.0))) {
        visibleFraction = 0.0;
      } else if (dart.test(visibility_detector._floatNear(visibleFraction, 1.0))) {
        visibleFraction = 1.0;
      }
      if (!(visibleFraction >= 0)) dart.assertFailed(null, I[5], 143, 12, "visibleFraction >= 0");
      if (!(visibleFraction <= 1)) dart.assertFailed(null, I[5], 144, 12, "visibleFraction <= 1");
      return visibleFraction;
    }
    matchesVisibility(info) {
      if (!(info != null)) dart.assertFailed(null, I[5], 155, 12, "info != null");
      return dart.equals(this.size, info.size) && dart.equals(this.visibleBounds, info.visibleBounds);
    }
  };
  (visibility_detector.VisibilityInfo.new = function(opts) {
    let t0, t0$;
    let key = opts && 'key' in opts ? opts.key : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let visibleBounds = opts && 'visibleBounds' in opts ? opts.visibleBounds : null;
    this[key$1] = key;
    if (!(key != null)) dart.assertFailed(null, I[5], 76, 16, "key != null");
    this[size$] = (t0 = size, t0 == null ? ui.Size.zero : t0);
    this[visibleBounds$] = (t0$ = visibleBounds, t0$ == null ? ui.Rect.zero : t0$);
    ;
  }).prototype = visibility_detector.VisibilityInfo.prototype;
  dart.addTypeTests(visibility_detector.VisibilityInfo);
  dart.addTypeCaches(visibility_detector.VisibilityInfo);
  dart.setMethodSignature(visibility_detector.VisibilityInfo, () => ({
    __proto__: dart.getMethods(visibility_detector.VisibilityInfo.__proto__),
    matchesVisibility: dart.fnType(dart.legacy(core.bool), [dart.legacy(visibility_detector.VisibilityInfo)])
  }));
  dart.setGetterSignature(visibility_detector.VisibilityInfo, () => ({
    __proto__: dart.getGetters(visibility_detector.VisibilityInfo.__proto__),
    visibleFraction: dart.legacy(core.double)
  }));
  dart.setLibraryUri(visibility_detector.VisibilityInfo, I[6]);
  dart.setFieldSignature(visibility_detector.VisibilityInfo, () => ({
    __proto__: dart.getFields(visibility_detector.VisibilityInfo.__proto__),
    key: dart.finalFieldType(dart.legacy(key.Key)),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    visibleBounds: dart.finalFieldType(dart.legacy(ui.Rect))
  }));
  visibility_detector._area = function _area(size) {
    if (!(size != null)) dart.assertFailed(null, I[5], 166, 10, "size != null");
    if (!(dart.notNull(size.width) >= 0)) dart.assertFailed(null, I[5], 167, 10, "size.width >= 0");
    if (!(dart.notNull(size.height) >= 0)) dart.assertFailed(null, I[5], 168, 10, "size.height >= 0");
    return dart.notNull(size.width) * dart.notNull(size.height);
  };
  visibility_detector._floatNear = function _floatNear(f1, f2) {
    let absDiff = (dart.notNull(f1) - dart.notNull(f2))[$abs]();
    return absDiff <= 0.01 || absDiff / math.max(T.numL(), f1[$abs](), f2[$abs]()) <= 0.01;
  };
  dart.defineLazy(visibility_detector, {
    /*visibility_detector._kDefaultTolerance*/get _kDefaultTolerance() {
      return 0.01;
    }
  }, true);
  dart.trackLibraries("packages/visibility_detector/src/visibility_detector_controller.dart", {
    "package:visibility_detector/src/visibility_detector_controller.dart": visibility_detector_controller,
    "package:visibility_detector/src/visibility_detector_layer.dart": visibility_detector_layer,
    "package:visibility_detector/src/render_visibility_detector.dart": render_visibility_detector,
    "package:visibility_detector/src/visibility_detector.dart": visibility_detector
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["visibility_detector_controller.dart","visibility_detector_layer.dart","render_visibility_detector.dart","visibility_detector.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/visibility_detector/src/visibility_detector_controller.dart.lib.js"}');
  // Exports:
  return {
    src__visibility_detector_controller: visibility_detector_controller,
    src__visibility_detector_layer: visibility_detector_layer,
    src__render_visibility_detector: render_visibility_detector,
    src__visibility_detector: visibility_detector
  };
}));

//# sourceMappingURL=visibility_detector_controller.dart.lib.js.map
